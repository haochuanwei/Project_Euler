# encoding: utf-8
"""
Solutions to the first hundred problems of Project Euler.
"""
# pylint: disable=line-too-long, bad-whitespace, invalid-name

import wrappy
from tqdm import tqdm


@wrappy.probe()
def euler_problem_1(n=1000):
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    # compute the number of such multiples in three sets
    num_multiples_of_3 = (n - 1) // 3
    num_multiples_of_5 = (n - 1) // 5
    num_shared_multiples = (n - 1) // (3 * 5)

    # compute the sum of each set
    def sum_one_up_to_k(k):
        return (k ** 2 + k) / 2

    sum_multiples_of_3 = sum_one_up_to_k(num_multiples_of_3) * 3
    sum_multiples_of_5 = sum_one_up_to_k(num_multiples_of_5) * 5
    sum_shared_multiples = sum_one_up_to_k(num_shared_multiples) * (3 * 5)

    # use inclusion/exclusion to compute the final answer
    retval = sum_multiples_of_3 + sum_multiples_of_5 - sum_shared_multiples
    return retval


@wrappy.probe()
def euler_problem_2(n=4000000):
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    # note that for every triple starting with (1, 2, 3), the middle value is even
    def new_triple(old_triple):
        _left, _mid, _right = old_triple
        left = _mid + _right
        mid = left + _right
        right = left + mid
        return (left, mid, right)

    retval = 0
    current_triple = (1, 2, 3)
    while True:
        if current_triple[1] > n:
            break
        retval += current_triple[1]
        current_triple = new_triple(current_triple)
    return retval


@wrappy.probe()
def euler_problem_3(n=600851475143):
    """
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    """
    # start from 2 and keep dividing
    from subroutines import least_divisor

    greatest_divisor = 2
    value = n
    while greatest_divisor < value:
        greatest_divisor = least_divisor(value, greatest_divisor)
        value /= greatest_divisor

    return greatest_divisor


@wrappy.probe()
def euler_problem_4(n=3):
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.
    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    from subroutines import is_a_palindrome

    assert n >= 2
    greatest_product = 0
    # brute-force approach that searches the high end of possible products
    upper_bound = 10 ** n - 1
    lower_bound = int(0.9 * upper_bound)
    for p in range(upper_bound, lower_bound, -1):
        for q in range(upper_bound, lower_bound, -1):
            candidate = p * q
            if candidate > greatest_product:
                if is_a_palindrome(candidate):
                    greatest_product = candidate
    return greatest_product


@wrappy.probe()
def euler_problem_5(n=20):
    """
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    """
    from subroutines import least_divisor

    def subproblem(num, cache):
        """
        Uses a cache to store intermediate results.
        """
        assert isinstance(num, int)
        assert num > 0
        # base case
        if num == 1:
            cache[num] = 1
            return cache[num]

        # recursion / dynamic programming
        if not num - 1 in cache.keys():
            prev = subproblem(num - 1, cache)
        if prev % num == 0:
            cache[num] = prev
        else:
            # take advantage of the fact that any divisor of num divides prev
            factor = least_divisor(num, floor=2)
            cache[num] = prev * factor
        return cache[num]

    solution_cache = {}
    return subproblem(n, solution_cache)


@wrappy.probe()
def euler_problem_6(n=100):
    """
    The sum of the squares of the first ten natural numbers is,
    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10)^2 = 55^2 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    """
    # looks like brute force gives you O(n) or O(n logn), which is not bad...
    # but we can do better with mathematical insight.
    def sum_of_integer_squares(k):
        """
        Use the formula 1^2 + 2^2 + ... + n^2 = (n * (n+1) * (2n+1)) / 6.
        """
        return (k * (k + 1) * (2 * k + 1)) / 6

    def square_of_integer_sums(k):
        """
        Use the formula 1 + 2 + ... + n = n (n+1) / 2.
        """
        return (k * (k + 1) / 2) ** 2

    # O(logn) basic operations
    sqsum = square_of_integer_sums(n)
    sumsq = sum_of_integer_squares(n)
    return int(sqsum - sumsq)


@wrappy.probe()
def euler_problem_7(n=10001):
    """
    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    What is the 10001st prime number?
    """
    from subroutines import has_nontrivial_divisor

    # brute force: check numbers one by one
    value = 1
    num_primes = 0
    while num_primes < n:
        value += 1
        if not has_nontrivial_divisor(value):
            num_primes += 1
    return value


@wrappy.probe()
def euler_problem_8(n=13):
    """
    The four adjacent digits in the 1000-digit number that have the greatest product are 9 * 9 * 8 * 9 = 5832.
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    """
    from functools import reduce

    # preprocessing
    series = """\
    73167176531330624919225119674426574742355349194934\
    96983520312774506326239578318016984801869478851843\
    85861560789112949495459501737958331952853208805511\
    12540698747158523863050715693290963295227443043557\
    66896648950445244523161731856403098711121722383113\
    62229893423380308135336276614282806444486645238749\
    30358907296290491560440772390713810515859307960866\
    70172427121883998797908792274921901699720888093776\
    65727333001053367881220235421809751254540594752243\
    52584907711670556013604839586446706324415722155397\
    53697817977846174064955149290862569321978468622482\
    83972241375657056057490261407972968652414535100474\
    82166370484403199890008895243450658541227588666881\
    16427171479924442928230863465674813919123162824586\
    17866458359124566529476545682848912883142607690042\
    24219022671055626321111109370544217506941658960408\
    07198403850962455444362981230987879927244284909188\
    84580156166097919133875499200524063689912560717606\
    05886116467109405077541002256983155200055935729725\
    71636269561882670428252483600823257530420752963450\
    """.replace(
        " ", ""
    )
    series = list(map(int, list(series)))
    assert len(series) > n

    # linear scan of all products
    tmp_prod = reduce(lambda a, b: a * b, series[0:n])
    max_prod = tmp_prod
    # attempt to cheat the product at O(1)
    for k in range(1, len(series) - n):
        # attempt works if the term to be removed is nonzero
        if series[k - 1] > 0:
            tmp_prod = tmp_prod * series[k + n - 1] / series[k - 1]
        # attmpt fails is the term to be removed is zero
        else:
            tmp_prod = reduce(lambda a, b: a * b, series[k : (k + n)])
        # update product
        if tmp_prod > max_prod:
            max_prod = tmp_prod
    return max_prod


@wrappy.probe()
def euler_problem_9(n=1000):
    """
    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    a^2 + b^2 = c^2
    For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.
    """
    import math

    assert n > 10
    # first assume that a <= b < c < n/2. Then, for c to be an integer we can't have a=b.
    # hence assume that a < b < c and that n/3 < 3.

    # brute-force O(n^2) approach
    for c in range(n // 2, n // 3, -1):
        c_sq = c ** 2
        for b in range(c - 1, int(c / math.sqrt(2)), -1):
            a = n - c - b
            if a ** 2 + b ** 2 == c_sq:
                return a * b * c
    return -1


@wrappy.probe()
def euler_problem_10(n=2000000):
    """
    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    Find the sum of all the primes below two million.
    """

    def divisible_by_prime(num, primes):
        assert num >= 2
        for _p in primes:
            if num % _p == 0:
                return True
        return False

    # brute force: check numbers one by one, starting at 3
    # also maintain a list of primes to divide by
    value = 2
    current_primes = [2]
    while value < n - 1:
        if value % 10000 == 0:
            print(value)
        value += 1
        if not divisible_by_prime(value, current_primes):
            current_primes.append(value)
    return sum(current_primes)


@wrappy.probe()
def euler_problem_11(k=4):
    """
    In the 20 * 20 grid below, four numbers along a diagonal line have been marked in red.
    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    The product of these numbers is 26 * 63 * 78 * 14 = 1788696.
    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20 * 20 grid?
    """
    # This problem always takes at least O(M^2) where M is the size of the grid.
    # Here's the argument:
    # Consider the reduced problem where we only care about adjacent numbers in the horizontal direction. Then we need a linear scan in each row, giving a running time of O(M^2).
    # Note the brute force takes O(M^2), which is good enough in asymtotic scaling.

    # construct the array
    import numpy as np

    arr_in_str_form = """
    08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
    """
    arr_in_str_form = [_x for _x in arr_in_str_form.split("\n") if len(_x) > 0]
    arr = [[int(_z) for _z in _y.split(" ") if len(_z) > 0] for _y in arr_in_str_form]
    arr = np.array([_a for _a in arr if len(_a) > 0])
    assert arr.shape == (20, 20)

    # set up max product variable
    max_prod = 0

    # consider horizontal and vertical
    for i in range(0, 20):
        for j in range(0, 20 - k + 1):
            # horizontal
            value = 1
            for shift in range(0, k):
                value *= arr[i][j + shift]
            if value > max_prod:
                max_prod = value

            # vertical
            value = 1
            for shift in range(0, k):
                value *= arr[j + shift][i]
            if value > max_prod:
                max_prod = value

    # consider diagonal directions
    for i in range(0, 20 - k + 1):
        for j in range(0, 20 - k + 1):
            # upper-left-to-lower-right
            value = 1
            for shift in range(0, k):
                value *= arr[i + shift][j + shift]
            if value > max_prod:
                max_prod = value

            # upper-right-to-lower-left
            value = 1
            for shift in range(0, k):
                value *= arr[i + shift][20 - 1 - j - shift]
            if value > max_prod:
                max_prod = value

    return max_prod


@wrappy.probe()
def euler_problem_12(n=500, trial_bound=10 ** 6):
    """
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.
    What is the value of the first triangle number to have over five hundred divisors?
    """
    from subroutines import Factorizer, get_num_divisors

    # initialize cache
    fac = Factorizer(bound=trial_bound)
    candidate = 1
    cache_num_divisors = {1: 1}
    # dynamic programming execution assuming that the candidate is bounded
    # here's the trick: we don't check the number to be outputed, but its near-squarer-root.
    while candidate < trial_bound:
        candidate += 1
        factors = fac.factorize(candidate)
        cache_num_divisors[candidate] = get_num_divisors(factors)
        # calculate the number of divisors of (candidate-1) * candidate / 2
        if candidate % 2 == 0:
            prod_num_divisors = (
                cache_num_divisors[candidate // 2] * cache_num_divisors[candidate - 1]
            )
        else:
            prod_num_divisors = (
                cache_num_divisors[candidate] * cache_num_divisors[(candidate - 1) // 2]
            )
        if prod_num_divisors > n:
            return prod_num_divisors, int((candidate - 1) * candidate / 2)
    return -1


@wrappy.probe()
def euler_problem_13():
    """
    Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
    """
    raw_list = """
    37107287533902102798797998220837590246510135740250
    46376937677490009712648124896970078050417018260538
    74324986199524741059474233309513058123726617309629
    91942213363574161572522430563301811072406154908250
    23067588207539346171171980310421047513778063246676
    89261670696623633820136378418383684178734361726757
    28112879812849979408065481931592621691275889832738
    44274228917432520321923589422876796487670272189318
    47451445736001306439091167216856844588711603153276
    70386486105843025439939619828917593665686757934951
    62176457141856560629502157223196586755079324193331
    64906352462741904929101432445813822663347944758178
    92575867718337217661963751590579239728245598838407
    58203565325359399008402633568948830189458628227828
    80181199384826282014278194139940567587151170094390
    35398664372827112653829987240784473053190104293586
    86515506006295864861532075273371959191420517255829
    71693888707715466499115593487603532921714970056938
    54370070576826684624621495650076471787294438377604
    53282654108756828443191190634694037855217779295145
    36123272525000296071075082563815656710885258350721
    45876576172410976447339110607218265236877223636045
    17423706905851860660448207621209813287860733969412
    81142660418086830619328460811191061556940512689692
    51934325451728388641918047049293215058642563049483
    62467221648435076201727918039944693004732956340691
    15732444386908125794514089057706229429197107928209
    55037687525678773091862540744969844508330393682126
    18336384825330154686196124348767681297534375946515
    80386287592878490201521685554828717201219257766954
    78182833757993103614740356856449095527097864797581
    16726320100436897842553539920931837441497806860984
    48403098129077791799088218795327364475675590848030
    87086987551392711854517078544161852424320693150332
    59959406895756536782107074926966537676326235447210
    69793950679652694742597709739166693763042633987085
    41052684708299085211399427365734116182760315001271
    65378607361501080857009149939512557028198746004375
    35829035317434717326932123578154982629742552737307
    94953759765105305946966067683156574377167401875275
    88902802571733229619176668713819931811048770190271
    25267680276078003013678680992525463401061632866526
    36270218540497705585629946580636237993140746255962
    24074486908231174977792365466257246923322810917141
    91430288197103288597806669760892938638285025333403
    34413065578016127815921815005561868836468420090470
    23053081172816430487623791969842487255036638784583
    11487696932154902810424020138335124462181441773470
    63783299490636259666498587618221225225512486764533
    67720186971698544312419572409913959008952310058822
    95548255300263520781532296796249481641953868218774
    76085327132285723110424803456124867697064507995236
    37774242535411291684276865538926205024910326572967
    23701913275725675285653248258265463092207058596522
    29798860272258331913126375147341994889534765745501
    18495701454879288984856827726077713721403798879715
    38298203783031473527721580348144513491373226651381
    34829543829199918180278916522431027392251122869539
    40957953066405232632538044100059654939159879593635
    29746152185502371307642255121183693803580388584903
    41698116222072977186158236678424689157993532961922
    62467957194401269043877107275048102390895523597457
    23189706772547915061505504953922979530901129967519
    86188088225875314529584099251203829009407770775672
    11306739708304724483816533873502340845647058077308
    82959174767140363198008187129011875491310547126581
    97623331044818386269515456334926366572897563400500
    42846280183517070527831839425882145521227251250327
    55121603546981200581762165212827652751691296897789
    32238195734329339946437501907836945765883352399886
    75506164965184775180738168837861091527357929701337
    62177842752192623401942399639168044983993173312731
    32924185707147349566916674687634660915035914677504
    99518671430235219628894890102423325116913619626622
    73267460800591547471830798392868535206946944540724
    76841822524674417161514036427982273348055556214818
    97142617910342598647204516893989422179826088076852
    87783646182799346313767754307809363333018982642090
    10848802521674670883215120185883543223812876952786
    71329612474782464538636993009049310363619763878039
    62184073572399794223406235393808339651327408011116
    66627891981488087797941876876144230030984490851411
    60661826293682836764744779239180335110989069790714
    85786944089552990653640447425576083659976645795096
    66024396409905389607120198219976047599490197230297
    64913982680032973156037120041377903785566085089252
    16730939319872750275468906903707539413042652315011
    94809377245048795150954100921645863754710598436791
    78639167021187492431995700641917969777599028300699
    15368713711936614952811305876380278410754449733078
    40789923115535562561142322423255033685442488917353
    44889911501440648020369068063960672322193204149535
    41503128880339536053299340368006977710650566631954
    81234880673210146739058568557934581403627822703280
    82616570773948327592232845941706525094512325230608
    22918802058777319719839450180888072429661980811197
    77158542502016545090413245809786882778948721859617
    72107838435069186155435662884062257473692284509516
    20849603980134001723930671666823555245252804609722
    53503534226472524250874054075591789781264330331690
    """
    # take the first 16 digits and throw away the rest.
    arr_in_str_form = [
        _x for _x in raw_list.split("\n") if len(_x.replace(" ", "")) > 0
    ]
    arr = [int(_y[:16]) for _y in arr_in_str_form]
    assert len(arr) == 100

    return str(sum(arr))[:10]


@wrappy.probe()
def euler_problem_14(n=1000000):
    """
    The following iterative sequence is defined for the set of positive integers:
    n -> n/2 (n is even)
    n -> 3n + 1 (n is odd)
    Using the rule above and starting with 13, we generate the following sequence:
    13 -> 40 -> 20 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
    It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
    Which starting number, under one million, produces the longest chain?
    NOTE: Once the chain starts the terms are allowed to go above one million.
    """

    def collatz(num):
        """
        Subroutine to calculate the next term in the collatz sequence.
        """
        assert num > 0 and isinstance(num, int)
        next_term = (num // 2) if (num % 2 == 0) else (3 * num + 1)
        return next_term

    def lookup_collatz_length(num, cache):
        """
        Uses recursion with cache for "non-sequential dynamic programming".
        """
        assert cache[1] == 1
        if num in cache.keys():
            return cache[num]
        length = lookup_collatz_length(collatz(num), cache) + 1
        cache[num] = length
        return length

    # initialize cache
    solution_cache = {1: 1}
    max_length = 1
    best_start = 1
    for k in range(1, n):
        _length = lookup_collatz_length(k, solution_cache)
        if _length > max_length:
            max_length = _length
            best_start = k
    # reconstuct the longest collatz sequence
    best_chain = []
    value = best_start
    while value > 1:
        best_chain.append(value)
        value = collatz(value)
    best_chain.append(1)
    return best_start, max_length, best_chain


@wrappy.probe()
def euler_problem_15(n=20):
    """
    Starting in the top left corner of a 2 * 2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
    How many such routes are there through a 20 * 20 grid?
    """
    # this is classic "2n choose n".
    num_routes = 1.0
    # trick to compute (2n)! / n! with less risk of numeric overflow
    for k in range(1, n + 1):
        num_routes *= (n + k) / k
    return round(num_routes)


@wrappy.probe()
def euler_problem_16(n=1000):
    """
    2 ^ 15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    What is the sum of the digits of the number 2 ^ 1000?
    """
    # 2 ^ 1000 is between 10^250 and 10^333, which is too large for typical data types.
    # However, one can easily store by digit.
    from subroutines import DigitwiseInteger

    # run subroutine n times
    num = DigitwiseInteger(1)
    for k in range(0, n):  # pylint: disable=unused-variable
        num.multiply_by_constant(2, in_place=True)
    return sum(num.order_dict.values())


@wrappy.probe()
def euler_problem_17(n=1000):
    """
    If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
    If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
    NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
    """
    hard_coded_mapping = {
        0: 0,  # "zero" in this case is really "nothing"
        1: 3,  # "one"
        2: 3,  # "two"
        3: 5,  # etc.
        4: 4,
        5: 4,
        6: 3,
        7: 5,
        8: 5,
        9: 4,
        10: 3,
        11: 6,
        12: 6,
        13: 8,
        14: 8,
        15: 7,
        16: 7,
        17: 9,
        18: 8,
        19: 8,
        20: 6,
        30: 6,
        40: 5,
        50: 5,
        60: 5,
        70: 7,
        80: 6,
        90: 6,
    }

    def subroutine_small(num):
        """
        Assumes that the number is below a hundred.
        """
        assert isinstance(num, int) and (num >= 0) and (num < 100), num
        if num in hard_coded_mapping.keys():
            return hard_coded_mapping[num]
        floor_to_ten = (num // 10) * 10
        modulos_ten = num % 10
        return hard_coded_mapping[floor_to_ten] + hard_coded_mapping[modulos_ten]

    def count_digits(num):
        """
        Assumes that the number is below a million.
        """
        assert isinstance(num, int) and (num > 0), num
        num_thousands = num // 1000
        num_hundreds = (num % 1000) // 100
        num_small = num % 100

        part_below_hundred = subroutine_small(num_small)
        digits = part_below_hundred
        if num_thousands > 0:
            digits += count_digits(num_thousands) + 8  # 8 from "thousand"
        if num_hundreds > 0:
            digits += count_digits(num_hundreds) + 7  # 7 from "hundred"
        if (num_thousands > 0 or num_hundreds > 0) and part_below_hundred > 0:
            digits += 3  # 3 from "and"
        return digits

    def test():  # pylint: disable=unused-variable
        from random import randint

        for k in range(0, 10):
            trial = randint(1, 10000)
            print(trial, count_digits(trial))
        for k in range(1, 20):
            trial = k * 50
            print(trial, count_digits(trial))

    total_digits = 0
    for k in range(1, n + 1):
        val = count_digits(k)
        # print(k, val)
        total_digits += val
    return total_digits


@wrappy.probe()
def euler_problem_18(row_idx=-1):
    """
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
       3
      7 4
     2 4 6
    8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.
    Find the maximum total from top to bottom of the triangle below:
                  75
                 95 64
                17 47 82
               18 35 87 10
              20 04 82 47 65
             19 01 23 75 03 34
            88 02 77 73 07 63 67
           99 65 04 28 06 16 70 92
          41 41 26 56 83 40 80 70 33
         41 48 72 33 47 32 37 16 94 29
        53 71 44 65 25 43 91 52 97 51 14
       70 11 33 28 77 73 17 78 39 68 17 57
      91 71 52 38 17 14 91 43 58 50 27 29 48
     63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
    NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
    """
    inp_arr = """
    75
    95 64
    17 47 82
    18 35 87 10
    20 04 82 47 65
    19 01 23 75 03 34
    88 02 77 73 07 63 67
    99 65 04 28 06 16 70 92
    41 41 26 56 83 40 80 70 33
    41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
    70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
    63 66 04 68 89 53 67 30 73 16 69 87 40 31
    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
    """
    from subroutines import max_sum_path_in_triangle

    # turn raw input into a triangular array
    arr = [
        [int(_z) for _z in _y.split(" ") if len(_z) > 0] for _y in inp_arr.split("\n")
    ]
    arr = [_l for _l in arr if len(_l) > 0]
    return max_sum_path_in_triangle(arr, row_idx)


@wrappy.probe()
def euler_problem_19(n=2000):
    """
    You are given the following information, but you may prefer to do some research for yourself.
    1 Jan 1900 was a Monday.
    Thirty days has September,
    April, June and November.
    All the rest have thirty-one,
    Saving February alone,
    Which has twenty-eight, rain or shine.
    And on leap years, twenty-nine.
    A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
    How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
    """
    month_to_days_common = {
        1: 31,
        2: 28,
        3: 31,
        4: 30,
        5: 31,
        6: 30,
        7: 31,
        8: 31,
        9: 30,
        10: 31,
        11: 30,
        12: 31,
    }
    month_to_days_leap = {
        1: 31,
        2: 29,
        3: 31,
        4: 30,
        5: 31,
        6: 30,
        7: 31,
        8: 31,
        9: 30,
        10: 31,
        11: 30,
        12: 31,
    }

    def count_Sunday_1sts(year, first_day):
        """
        Subroutine to count the number of 1st Sundays in a year.
        """
        # set up calculation
        month_to_days = dict(month_to_days_common)
        if year % 4 == 0:
            if (year % 100 != 0) or (year % 400 == 0):
                month_to_days = dict(month_to_days_leap)
        val = first_day

        # loop over months
        count = 0
        months = []
        for _month in range(1, 13):
            if val % 7 == 0:
                count += 1
                months.append((year, _month))
            val += month_to_days[_month]
        return count, val % 7, months[:]

    # Jan 1 1900 was a Monday
    first_day = 1
    total_count = 0
    match_months = []
    for _year in range(1900, n + 1):
        count, first_day, months = count_Sunday_1sts(_year, first_day)
        total_count += count
        match_months += months
    # the problem asks for Jan 1, 1901 to Dec 31, 2000, so we exclude 1900
    return total_count - count_Sunday_1sts(1900, 1)[0]


@wrappy.probe()
def euler_problem_20(n=100):
    """
    n! means n * (n - 1) * ... * 3 * 2 * 1
    For example, 10! = 10 * 9 * ... * 3 * 2 * 1 = 3628800,
    and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
    Find the sum of the digits in the number 100!
    """
    # 100! is between 10^100 and 10^200, which is too large for typical data types.
    # However, one can easily store by digit.
    from subroutines import DigitwiseInteger

    # run subroutine n times
    num = DigitwiseInteger(1)
    for k in range(1, n + 1):
        num.multiply_by_constant(k, in_place=True)
    return sum(num.order_dict.values())


@wrappy.probe()
def euler_problem_21(n=10000):
    """
    Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
    If d(a) = b and d(b) = a, where a != b, then a and b are an amicable pair and each of a and b are called amicable numbers.
    For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
    Evaluate the sum of all the amicable numbers under 10000.
    """

    from subroutines import Factorizer, get_sum_proper_divisors

    fac = Factorizer(bound=n)

    def check_amicable(a):
        a_factorization = fac.factorize(a)
        b = get_sum_proper_divisors(a_factorization)
        b_factorization = fac.factorize(b)
        if a == get_sum_proper_divisors(b_factorization) and a != b:
            return (a, b)
        return False

    # initialize answer
    candidate = 1
    amicables = []

    while candidate < n:
        candidate += 1
        amicable_pair = check_amicable(candidate)
        if amicable_pair:
            a, b = amicable_pair
            if a < b:
                amicables += [a, b]
    return amicables


@wrappy.probe()
def euler_problem_22():
    """
    Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

    For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 * 53 = 49714.

    What is the total of all the name scores in the file?
    """
    from custom_config import get_attachment_path

    with open(get_attachment_path(22), "r") as f:
        names = sorted([eval(_x) for _x in f.read().split(",")])
    char_to_int = {
        "A": 1,
        "B": 2,
        "C": 3,
        "D": 4,
        "E": 5,
        "F": 6,
        "G": 7,
        "H": 8,
        "I": 9,
        "J": 10,
        "K": 11,
        "L": 12,
        "M": 13,
        "N": 14,
        "O": 15,
        "P": 16,
        "Q": 17,
        "R": 18,
        "S": 19,
        "T": 20,
        "U": 21,
        "V": 22,
        "W": 23,
        "X": 24,
        "Y": 25,
        "Z": 26,
    }

    def name_to_score(name):
        return sum([char_to_int[_char] for _char in list(name)])

    scores = [(i + 1) * name_to_score(_name) for i, _name in enumerate(names)]
    return sum(scores)


@wrappy.probe()
def euler_problem_23():
    """
    A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
    A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
    As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
    Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
    """
    from subroutines import Factorizer, get_sum_proper_divisors

    fac = Factorizer(bound=28123)

    def is_abundant(num):
        factorization = fac.factorize(num)
        sum_proper_divisors = get_sum_proper_divisors(factorization)
        return bool(sum_proper_divisors > num)

    def is_sum_of_two_abundant(candidate, abundants):
        """
        Determine whether candidate is the sum of two abundant numbers.
        abundants -- dict with abundant numbers as keys.
        """
        for a in abundants.keys():
            b = candidate - a
            if b in abundants.keys():
                return True
        return False

    # determine abundant numbers that are below the analytic bound
    abundant_numbers = dict()
    for k in range(0, 28123):
        if is_abundant(k):
            abundant_numbers[k] = 1

    # determine which numbers cannot be written as a sum of two abundant numbers
    not_sum_of_two_abundant = []
    for s in range(0, 28123):
        if not is_sum_of_two_abundant(s, abundant_numbers):
            not_sum_of_two_abundant.append(s)

    return sum(not_sum_of_two_abundant)


@wrappy.probe()
def euler_problem_24(
    digits=["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], n=1000000
):
    """
    A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
    012   021   102   120   201   210
    What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
    """
    # insight: there are 10 numbers from 0 to 9, i.e. 10! = 3628800 permutations.
    # -> there are 362880 such permutations that start with 0.
    # -> there are 1086400 such permutations that start with 0, 1, or 2.
    from subroutines import factorial

    assert factorial(len(digits)) > n - 1
    permutation = ""
    digits_left = digits[:]
    perm_position = n - 1
    while digits_left:
        perms_per_first_digit = factorial(len(digits_left) - 1)
        next_idx = perm_position // perms_per_first_digit
        permutation += digits_left.pop(next_idx)
        perm_position -= next_idx * perms_per_first_digit
    return permutation


@wrappy.probe()
def euler_problem_25(n=1000):
    """
    The Fibonacci sequence is defined by the recurrence relation:
    Fn = Fn-1 + Fn-2, where F1 = 1 and F2 = 1.
    Hence the first 12 terms will be:
    F1 = 1
    F2 = 1
    F3 = 2
    F4 = 3
    F5 = 5
    F6 = 8
    F7 = 13
    F8 = 21
    F9 = 34
    F10 = 55
    F11 = 89
    F12 = 144
    The 12th term, F12, is the first term to contain three digits.
    What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
    """
    # a geometric series with a common ratio of (sqrt(5)+1)/2 is an excellent numerical approximation of the Fibonacci sequence.

    from math import sqrt, log, ceil

    # use F8 thru F12 to estimate the log of the 10th term of the geometric series
    log_10th_term = (log(21) + log(34) + log(55) + log(89) + log(144)) / 5
    log_ratio = log((sqrt(5) + 1) / 2)
    # n digits is on the order of 10^(n-1)
    diff_index = ((n - 1) * log(10) - log_10th_term) / log_ratio
    return ceil(diff_index) + 10


@wrappy.probe()
def euler_problem_26(n=1000):
    """
    A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
    1/2	= 	0.5
    1/3	= 	0.(3)
    1/4	= 	0.25
    1/5	= 	0.2
    1/6	= 	0.1(6)
    1/7	= 	0.(142857)
    1/8	= 	0.125
    1/9	= 	0.(1)
    1/10= 	0.1
    Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
    Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
    """
    # a bit of mathematical insight is helpful here.
    # if d is divisible by 2 or 5, d has the same number of digits in the 1/d recurring cycle as (d/2) or (d/5) respectively.
    # assuming that d is not divisible by 2 or 5, then the smallest m with (10^m - 1) divisible by d gives the length of the recurring cycle.

    def remove_2_5_factors(num):
        """
        Divide a number by 2 and 5 until it becomes coprime with 2 and 5.
        """
        if num % 2 == 0:
            return remove_2_5_factors(num // 2)
        if num % 5 == 0:
            return remove_2_5_factors(num // 5)
        return num

    cache_cycle_length = {}
    for d in range(2, n):
        d_equivalent = remove_2_5_factors(d)
        # base case: d has no prime factors other than 2 and 5
        if d_equivalent == 1:
            cache_cycle_length[d] = 0
        # recursive case: d is divisible by 2 or 5 but has other prime factors
        elif d_equivalent in cache_cycle_length.keys():
            cache_cycle_length[d] = cache_cycle_length[d_equivalent]
        # base case: d is not divisible by 2 or 5
        else:
            # one should be alerted if the for loop fails to update the cycle length.
            cache_cycle_length[d] = -1
            for m in range(1, 1000):
                if (10 ** m - 1) % d == 0:
                    cache_cycle_length[d] = m
                    break
    if min(cache_cycle_length.values()) < 0:
        print("Warning: some number has longer cycle length than we screened for.")
    d_to_return = max(cache_cycle_length.keys(), key=lambda x: cache_cycle_length[x])
    return d_to_return, cache_cycle_length[d_to_return]


@wrappy.probe()
def euler_problem_27(k=1000):
    """
    Euler discovered the remarkable quadratic formula:
    n2+n+41
    It turns out that the formula will produce 40 primes for the consecutive integer values 0<=n<=39. However, when n=40,402+40+41=40(40+1)+41 is divisible by 41, and certainly when n=41,412+41+41 is clearly divisible by 41.
    The incredible formula n^2-79n+1601 was discovered, which produces 80 primes for the consecutive values 0<=n<=79. The product of the coefficients, -79 and 1601, is -126479.
    Considering quadratics of the form:
    n^2+an+b, where |a|<1000 and |b|<=1000
    where |n| is the modulus/absolute value of n
    e.g. |11|=11 and |-4|=4
    Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n=0.
    """
    # consider the n=0 and n=1 cases. b must be a prime number, thus positive; 1+a+b must be a prime number, so a > -b.
    # n^2+an must be consistently even or consistently odd, but it can only be consistently even (because 'consistently odd' cannot happen no matter what a is). This also implies that both a and b need to be odd.
    # -> idea: first determine all the possible values of b. Then for each b, there are O(b) values to a to try.

    from subroutines import Factorizer, is_prime_given_factorization

    fac = Factorizer()

    def prime_quadratic_sequence(a, b):
        """
        Determine the sequence of primes n^2+an+b parametrized by a and b. Uses a cache to read and store factorizations.
        """
        n = 0
        terms = []
        while True:
            _term = n * (n + a) + b
            _term_factorization = fac.factorize(_term)
            if is_prime_given_factorization(_term_factorization):
                n += 1
                terms.append(_term)
            else:
                break
        return terms

    odd_primes_under_k = []
    # scan for odd primes as possible values of b.
    for _trial in range(3, k + 1):
        _factorization = fac.factorize(_trial)
        if is_prime_given_factorization(_factorization):
            odd_primes_under_k.append(_trial)

    # loop over possible values of b
    max_length = 0
    best_tuple = None
    best_sequence = None
    for _b in odd_primes_under_k:
        for _a in range(-1 * _b, k + 1, 2):
            sequence = prime_quadratic_sequence(_a, _b)
            if len(sequence) > max_length:
                max_length = len(sequence)
                best_tuple = (_a, _b)
                best_sequence = sequence[:]
    return max_length, best_tuple, best_sequence


@wrappy.probe()
def euler_problem_28(n=1001):
    """
    Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
    21 22 23 24 25
    20  7  8  9 10
    19  6  1  2 11
    18  5  4  3 12
    17 16 15 14 13
    It can be verified that the sum of the numbers on the diagonals is 101.
    What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
    """
    # insight: we can totally get away with flattening the spiral. Then we are essentially trying to find the sum of a subsequence with a certain spacing pattern.
    # more insight: for each square, the average of the four elements in the corners equals the middle element on the left side.
    # 3^2 - (3^2 - 1^2) * (3/8) = 3^2 * (5/8) + 1^2 * (3/8) = 6
    # 5^2 - (5^2 - 3^2) * (3/8) = 5^2 * (5/8) + 3^2 * (3/8) = 19

    def sum_corners(side_length):
        assert side_length % 2 == 1
        if side_length == 1:
            return 1
        return 4 * int(side_length ** 2 * (5 / 8) + (side_length - 2) ** 2 * (3 / 8))

    # add contribution from each layer
    total = 0
    for k in range(1, n + 1, 2):
        total += sum_corners(k)

    return total


@wrappy.probe()
def euler_problem_29():
    """
    Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
    2^2=4,  2^3=8 ,  2^4=16,  2^5=32
    3^2=9,  3^3=27,  3^4=81,  3^5=243
    4^2=16, 4^3=64,  4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125
    If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?
    """
    # idea: integers and their factorizations map one-to-one and onto.
    # Powers can be stored using factorization dicts whose JSON representation are hashible and within the boundary of common data types.
    from subroutines import Factorizer, restore_from_factorization
    import json

    fac = Factorizer(bound=100)

    def raise_factorization(factorization, b):
        """
        Raise a factorization to b-th power.
        """
        factors = dict(factorization)
        for _key in factors.keys():
            factors[_key] *= b
        return factors

    def power(a, b):
        """
        Compute a^b in factorial form.
        """
        a_factorization = fac.factorize(a)
        a_b = raise_factorization(a_factorization, b)
        return a_b

    all_powers = []
    for a in range(2, 101, 1):
        for b in range(2, 101, 1):
            a_to_the_b_th = power(a, b)
            all_powers.append(json.dumps(a_to_the_b_th, sort_keys=True))
    all_powers = [json.loads(_p) for _p in list(set(all_powers))]
    return [restore_from_factorization(_p) for _p in all_powers]


@wrappy.probe()
def euler_problem_30(k=5):
    """
    Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
    1634 = 1^4 + 6^4 + 3^4 + 4^4
    8208 = 8^4 + 2^4 + 0^4 + 8^4
    9474 = 9^4 + 4^4 + 7^4 + 4^4
    As 1 = 1^4 is not a sum it is not included.
    The sum of these numbers is 1634 + 8208 + 9474 = 19316.
    Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.
    """

    def is_sum_of_digit_powers(num, power):
        """
        Check if a number equals the sum of powers of its digits.
        """
        digits = [int(_d) for _d in list(str(num))]
        sumpow = sum([_d ** power for _d in digits])
        return num == sumpow

    num_that_meet_criterion = []
    # k * 10 ^ k is an upper bound for numbers that can meet the criterion
    for num in range(10, k * 10 ** k):
        if is_sum_of_digit_powers(num, k):
            num_that_meet_criterion.append(num)

    return num_that_meet_criterion


@wrappy.probe()
def euler_problem_31(n=200):
    """
    In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:
    1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
    It is possible to make £2 in the following way:
    1*£1 + *50p + 2*20p + 1*5p + 1*2p + 3*1p
    How many different ways can £2 be made using any number of coins?
    """
    from collections import defaultdict

    # define what values can a single coin take
    units = [1, 2, 5, 10, 20, 50, 100, 200]

    # keep a cache of the different ways a value can be composed from
    cache_combinations = {0: [{}]}

    def bump(combination, value):
        """
        Add a coin to a combination.
        combination -- str-to-int mapping, e.g. {'1': 2} for 2*1p coins.
        """
        new_combination = defaultdict(int)
        new_combination.update(combination)
        new_combination[value] += 1
        return new_combination

    # just like DP but greedily, define recursion with cache
    def subproblem(m, cache):
        """
        Compute all the number of ways to get to m pences.
        """
        import json

        # base case: lookup
        if m in cache.keys():
            return cache[m]
        # common case: compute and cache
        combinations = []
        for _unit in units:
            if m >= _unit:
                for _combination in subproblem(m - _unit, cache):
                    combinations.append(
                        json.dumps(bump(_combination, str(_unit)), sort_keys=True)
                    )
        combinations = [json.loads(_d) for _d in list(set(combinations))]
        cache[m] = combinations
        return combinations

    return subproblem(n, cache_combinations)


@wrappy.probe()
def euler_problem_32():
    """
    We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.
    The product 7254 is unusual, as the identity, 39 * 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.
    Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.
    HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.
    """
    from subroutines import is_m_to_n_pandigital

    # brute-force scan as this problem has bounded complexity
    pandigital_products = []
    for first_number in range(1, 100):
        for second_number in range(100, 10000):
            product = first_number * second_number
            concatenated = "".join(
                list(map(str, [first_number, second_number, product]))
            )
            if is_m_to_n_pandigital(concatenated, 1, 9):
                pandigital_products.append(product)

    pandigital_products = list(set(pandigital_products))
    return pandigital_products


@wrappy.probe()
def euler_problem_33():
    """
    The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.
    We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
    There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.
    If the product of these four fractions is given in its lowest common terms, find the value of the denominator.
    """
    suitable_fractions = []
    for common_digit in range(1, 10):
        for numer_digit in range(1, 10):
            # the fraction has to be less than one
            for denom_digit in range(numer_digit + 1, 10):
                numer_candidates = [
                    10 * common_digit + numer_digit,
                    10 * numer_digit + common_digit,
                ]
                denom_candidates = [
                    10 * common_digit + denom_digit,
                    10 * denom_digit + common_digit,
                ]
                for numer in numer_candidates:
                    for denom in denom_candidates:
                        fraction = numer / denom
                        if fraction == numer_digit / denom_digit:
                            suitable_fractions.append((numer, denom))
    return suitable_fractions


@wrappy.probe()
def euler_problem_34():
    """
    145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
    Find the sum of all numbers which are equal to the sum of the factorial of their digits.
    Note: as 1! = 1 and 2! = 2 are not sums they are not included.
    """
    from subroutines import factorial

    def sum_of_digit_factorials(num):
        return sum([factorial(int(_d)) for _d in list(str(num))])

    # 9! = 362880 < 10^6, so a number with p digits corresponds to a number bounded by p * 10^6.
    # -> the maximum value of p is 7. Simple brute-force solution works.
    suitable_numbers = []
    for num in range(3, 10 ** 7):
        if num == sum_of_digit_factorials(num):
            suitable_numbers.append(num)
    return suitable_numbers


@wrappy.probe()
def euler_problem_35(n=1000000):
    """
    The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
    There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
    How many circular primes are there below one million?
    """
    from subroutines import all_primes_under

    def rotate(num):
        """
        Rotate digits of a number and return all possibilities.
        """
        str_form = str(num)
        return [int(str_form[i:] + str_form[:i]) for i in range(len(str_form))]

    primes = set(all_primes_under(n))

    # use a dict to deduplicate
    circular_primes = {}
    for _p in primes:
        rotations = rotate(_p)
        # determine if _p is a circular prime
        _circular = True
        for _q in rotations:
            if not _q in primes:
                _circular = False
        # if circular, collect the numbers
        if _circular:
            for _q in rotations:
                circular_primes[_q] = 1

    return list(circular_primes.keys())


@wrappy.probe()
def euler_problem_36(n=1000000):
    """
    The decimal number, 585 = 1001001001_2 (binary), is palindromic in both bases.
    Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
    (Please note that the palindromic number, in either base, may not include leading zeros.)
    """
    from subroutines import is_a_palindrome

    def base_10_to_binary(num):
        return int(bin(num)[2:])

    double_palindromes = []
    for k in range(1, n):
        binary_form = base_10_to_binary(k)
        if is_a_palindrome(k) and is_a_palindrome(binary_form):
            double_palindromes.append(k)

    return double_palindromes


@wrappy.probe()
def euler_problem_37(bound=1000000):
    """
    The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
    Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
    NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
    """
    from subroutines import all_primes_under

    def get_truncations(num):
        """
        Truncate the digits of a number and return all possibilities.
        """
        str_form = str(num)
        truncations = [num]
        for start_index in range(1, len(str_form)):
            substring_l = str_form[:start_index]
            substring_r = str_form[start_index:]
            truncations.append(int(substring_l))
            truncations.append(int(substring_r))
        return list(set(truncations))

    primes = set(all_primes_under(bound))

    truncatable_primes = dict()
    for _p in primes:
        # base case: exclude primes that have only one digit
        if _p < 10:
            continue
        # for other numbers, consider all truncations
        truncations = get_truncations(_p)
        truncatable = True
        for _t in truncations:
            if not _t in primes:
                truncatable = False
                break
        if truncatable:
            truncatable_primes[_p] = 1
    return list(truncatable_primes.keys())


@wrappy.probe()
def euler_problem_38():
    """
    Take the number 192 and multiply it by each of 1, 2, and 3:
    192 × 1 = 192
    192 × 2 = 384
    192 × 3 = 576
    By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
    The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
    What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?
    """
    from subroutines import is_m_to_n_pandigital

    # the greatest number of digits that the base number can have is 4.
    pandigital_products = []
    for _base in range(1, 10 ** 4 - 1):
        # n is bounded between 2 and 9 inclusive
        for _n in range(2, 10):
            products = [_base * _v for _v in range(1, _n + 1)]
            concatenated_product = "".join(list(map(str, products)))
            if is_m_to_n_pandigital(concatenated_product, 1, 9):
                pandigital_products.append(concatenated_product)
    return pandigital_products


@wrappy.probe()
def euler_problem_39(max_perimeter=1000):
    """
    If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
    {20,48,52}, {24,45,51}, {30,40,50}
    For which value of p ≤ 1000, is the number of solutions maximised?
    """
    # assume a^2 + b^2 = c^2 and a <= b < c.
    # a + b > c  -> c < (max_perimeter+1) // 2.
    from math import sqrt

    # this upper bound is exclusive
    upper_bound_c = (max_perimeter + 1) // 2

    # first pre-compute perfect squares under c^2.
    # Then build on top of two-sum to determine Pythagorean sides.
    from subroutines import two_sum
    from collections import defaultdict

    perfect_squares = [_i ** 2 for _i in range(1, upper_bound_c)]
    perfect_squares_set = set(perfect_squares)
    solution_count = defaultdict(int)
    for c_squared in perfect_squares:
        a_sq_b_sq_combinations = two_sum(perfect_squares_set, c_squared)
        for a_squared, b_squared in a_sq_b_sq_combinations:
            perimeter = int(sqrt(a_squared) + sqrt(b_squared) + sqrt(c_squared))
            solution_count[perimeter] += 1
    return max(list(solution_count.keys()), key=lambda x: solution_count[x])


@wrappy.probe()
def euler_problem_40():
    """
    An irrational decimal fraction is created by concatenating the positive integers:
    0.123456789101112131415161718192021...
    It can be seen that the 12th digit of the fractional part is 1.
    If dn represents the nth digit of the fractional part, find the value of the following expression.
    d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000
    """

    def get_n_digits(n):
        """
        Compute n digits of the fractional part of the irrational number.
        """
        retarr = []
        num = 0
        while len(retarr) < n:
            num += 1
            retarr += list(map(int, list(str(num))))
        return retarr

    # brute-force the first 1000000 digits
    arr = get_n_digits(1000000)
    indices_plus_one = [1, 10, 100, 1000, 10000, 100000, 1000000]
    retval = 1
    for _i in indices_plus_one:
        retval *= arr[_i - 1]
    return retval


@wrappy.probe()
def euler_problem_41():
    """
    We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
    What is the largest n-digit pandigital prime that exists?
    """
    from subroutines import all_primes_under, is_m_to_n_pandigital

    # any 9-digit or 8-digit pandigital number must be divisible by 3, because its sum of digits is 45 or 36, respectively
    # thus the largest n-digit pandigital number cannot have more than 7 digits
    primes = set(all_primes_under(10 ** 7))
    pandigital_primes = []
    for _p in primes:
        num_digits = len(str(_p))
        if is_m_to_n_pandigital(_p, 1, num_digits):
            pandigital_primes.append(_p)
    return pandigital_primes


@wrappy.probe()
def euler_problem_42():
    """
    The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.
    Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
    """
    from custom_config import get_attachment_path
    from subroutines import is_triangular

    with open(get_attachment_path(42), "r") as f:
        words = [eval(_x) for _x in f.read().split(",")]
    char_to_int = {
        "A": 1,
        "B": 2,
        "C": 3,
        "D": 4,
        "E": 5,
        "F": 6,
        "G": 7,
        "H": 8,
        "I": 9,
        "J": 10,
        "K": 11,
        "L": 12,
        "M": 13,
        "N": 14,
        "O": 15,
        "P": 16,
        "Q": 17,
        "R": 18,
        "S": 19,
        "T": 20,
        "U": 21,
        "V": 22,
        "W": 23,
        "X": 24,
        "Y": 25,
        "Z": 26,
    }

    def word_to_score(word):
        return sum([char_to_int[_char] for _char in list(word)])

    triangle_count = 0
    for _word in words:
        if is_triangular(word_to_score(_word)):
            triangle_count += 1
    return triangle_count


@wrappy.probe()
def euler_problem_43():
    """
    The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.
    Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
    d2d3d4=406 is divisible by 2
    d3d4d5=063 is divisible by 3
    d4d5d6=635 is divisible by 5
    d5d6d7=357 is divisible by 7
    d6d7d8=572 is divisible by 11
    d7d8d9=728 is divisible by 13
    d8d9d10=289 is divisible by 17
    Find the sum of all 0 to 9 pandigital numbers with this property.
    """
    from subroutines import permutations_m_to_n_str

    idx_to_prime = {2: 2, 3: 3, 4: 5, 5: 7, 6: 11, 7: 13, 8: 17}

    divisible_pandigitals = []
    # all candidates come from 0-to-9 permutations that evaluate to more than 10^9
    candidates = [int(str_form) for str_form in permutations_m_to_n_str(0, 9)]
    candidates = [_c for _c in candidates if _c > 10 ** 9]
    # check one by one for the specified criterion
    for candidate in candidates:
        divisible = True
        str_form = str(candidate)
        for _idx, _prime in idx_to_prime.items():
            subint = int(str_form[(_idx - 1) : (_idx + 2)])
            if not subint % _prime == 0:
                divisible = False
                break
        if divisible:
            divisible_pandigitals.append(candidate)
    return divisible_pandigitals


@wrappy.probe()
def euler_problem_44():
    """
    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
    """
    from subroutines import two_sum, get_pentagonals

    pentagonals = set(get_pentagonals(10000))
    # Assume Pj < Pk. Then D + Pj = Pk, Pj + Pk = Pl, another pentagonal number.
    # Building on top of 2-Sum seems a good idea.
    # Note that D might be greater than Pj.
    two_sum_solutions = {}
    for _p in pentagonals:
        two_sum_solutions[_p] = two_sum(pentagonals, _p)

    min_d = -1
    best_tuple = None
    # Loop through all two-sum solutions
    for _pl, combinations in two_sum_solutions.items():
        for _pj, _pk in combinations:
            _d = _pk - _pj
            if _d in pentagonals:
                if min_d < 0 or min_d > _d:
                    min_d = _d
                    best_tuple = {"D": _d, "Pj": _pj, "Pk": _pk, "Pj + Pk": _pl}
    return best_tuple


@wrappy.probe()
def euler_problem_45(trial_index=100000):
    """
    Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
    It can be verified that T285 = P165 = H143 = 40755.
    Find the next triangle number that is also pentagonal and hexagonal.
    """
    from subroutines import get_triangulars, get_pentagonals, get_hexagonals
    from collections import defaultdict

    # note that the ratio of triangular:pentagonal:hexagonal values for the same index is roughly 1:3:4, so an index range ratio of roughly 12:7:6 is appropriate with ~n^2 value-index scaling
    triangulars = get_triangulars(trial_index)
    pentagonals = get_pentagonals(int(trial_index * 7 / 12))
    hexagonals = get_hexagonals(int(trial_index / 2))

    # use a dict for quick lookup and counting
    contributions = defaultdict(int)
    qualified = []
    for _L in [triangulars, pentagonals, hexagonals]:
        for _key in _L:
            contributions[_key] += 1
            if contributions[_key] == 3:
                qualified.append(_key)
    return qualified


@wrappy.probe()
def euler_problem_46(trial_bound=10 ** 4):
    """
    It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
    9 = 7 + 2×12
    15 = 7 + 2×22
    21 = 3 + 2×32
    25 = 7 + 2×32
    27 = 19 + 2×22
    33 = 31 + 2×12
    It turns out that the conjecture was false.
    What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
    """
    from subroutines import all_primes_under
    from math import sqrt, ceil

    primes = set(all_primes_under(trial_bound))
    twice_squares = [2 * (x ** 2) for x in range(1, ceil(sqrt(trial_bound / 2)))]

    # brute-force all odd composite numbers
    for candidate in range(9, trial_bound, 2):
        is_composite = not candidate in primes
        if is_composite:
            summable = False
            for _tsq in twice_squares:
                target = candidate - _tsq
                if target in primes:
                    summable = True
                    break
            if not summable:
                return candidate
    return -1


@wrappy.probe()
def euler_problem_47(k=4, bound=10 ** 6):
    """
    The first two consecutive numbers to have two distinct prime factors are:
    14 = 2 × 7
    15 = 3 × 5
    The first three consecutive numbers to have three distinct prime factors are:
    644 = 2² × 7 × 23
    645 = 3 × 5 × 43
    646 = 2 × 17 × 19.
    Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?
    """
    from subroutines import Factorizer

    # scan all integers in the interval [2, bound] until a tuple is found
    fac = Factorizer(bound=bound)
    trial = 1
    consecutive_qualified = 0
    while trial < bound:
        trial += 1
        _factorization = fac.factorize(trial)
        if len(_factorization.keys()) == k:
            consecutive_qualified += 1
            if consecutive_qualified == k:
                return trial - k + 1
        else:
            consecutive_qualified = 0
    return -1


@wrappy.probe()
def euler_problem_48(n=1000):
    """
    The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.

    Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
    """
    from subroutines import Modulos

    # we can perform all computations in Z_(10^10) since we only care about the last ten digits
    Z = Modulos(10 ** 10)
    retval = 0
    for k in range(1, n + 1):
        val = 1
        for i in range(0, k):  # pylint: disable=unused-variable
            val = Z.multiply(val, k)
        retval = Z.add(retval, val)
    return retval


@wrappy.probe()
def euler_problem_49():
    """
    The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.
    There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.
    What 12-digit number do you form by concatenating the three terms in this sequence?
    """
    # idea: the 3-term arithmetic sequence problem can be reduced to the two-sum problem.
    # idea: the permutation check can be reduced to counter dict comparison.
    from subroutines import all_primes_under, two_sum, related_by_digit_permutation

    # compute all primes in range
    primes_list = all_primes_under(10000)
    primes = set(primes_list)

    # check all primes
    qualified_tuples = []
    for _p in primes_list:
        combinations = two_sum(primes, 2 * _p)
        for _a, _b in combinations:
            # filter trivial cases
            if _p in (_a, _b):
                continue
            # use dict comparison to check permutations
            if related_by_digit_permutation(_a, _p) and related_by_digit_permutation(
                _b, _p
            ):
                qualified_tuples.append((_a, _p, _b))
    return qualified_tuples


@wrappy.probe()
def euler_problem_50(bound=10 ** 6):
    """
    The prime 41, can be written as the sum of six consecutive primes:
    41 = 2 + 3 + 5 + 7 + 11 + 13
    This is the longest sum of consecutive primes that adds to a prime below one-hundred.
    The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.
    Which prime, below one-million, can be written as the sum of the most consecutive primes?
    """
    from subroutines import all_primes_under

    primes_list = all_primes_under(bound)
    primes = set(primes_list)

    longest_chain = []
    for i, _p in enumerate(primes_list):
        # initialize the chain that starts with index i
        j = i
        partial_sum = 0
        chain = []
        # extend chain until partial sum goes out of range
        while True:
            chain.append(primes_list[j])
            partial_sum += primes_list[j]
            j += 1
            if partial_sum >= bound or j >= len(primes_list):
                break
            # if not out of range, compare with best chain so far
            if partial_sum in primes and len(chain) > len(longest_chain):
                longest_chain = chain[:]
    return longest_chain


@wrappy.probe()
def euler_problem_51(common_num_digits=3, target_num_digits=7, target_prime_count=8):
    """
    By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.
    By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.
    Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.
    """
    from subroutines import all_primes_under

    # observation 1: there must be three (or six, or... nine?) digits that are replaced. This is because otherwise, out of the ten numbers there must be at least three that are divisible by 3.
    # observation 2: the first and last digits are definitely not getting replaced.

    def get_candidates():
        """
        Determine all the groups of numbers that could qualify.
        """
        # first form the same digits
        candidates = [[common_num_digits * str(_d) for _d in range(0, 10)]]
        # insert more digits except the last
        for k in range(
            0, target_num_digits - common_num_digits - 1
        ):  # pylint: disable=unused-variable
            current_num_digits = len(candidates[0])
            candidates = [
                [inner[:-i] + str(_d) + inner[-i:] for inner in outer]
                for outer in candidates
                for i in range(0, current_num_digits + 1)
                for _d in range(0, 10)
            ]
        # append the last digit
        candidates = [
            [inner + str(_last_d) for inner in outer]
            for outer in candidates
            for _last_d in range(1, 10, 2)
        ]
        # deduplicate candidates
        candidates = [tuple(outer) for outer in candidates]
        candidates = list(set(candidates))
        return candidates

    candidates = get_candidates()

    # get all prime numbers in range
    primes = set(all_primes_under(10 ** target_num_digits))

    # brute-force the candidates that we've narrowed down to
    qualified_groups = []
    for _ten_numbers in candidates:
        group_of_primes = []
        for _num_str in _ten_numbers:
            # numbers with leading zeros do not count
            if _num_str[0] == "0":
                continue
            # pick up primes and count them
            if int(_num_str) in primes:
                group_of_primes.append(int(_num_str))
        if len(group_of_primes) == target_prime_count:
            qualified_groups.append(tuple(group_of_primes))
    return qualified_groups


@wrappy.probe()
def euler_problem_52():
    """
    It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.
    Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, contain the same digits.
    """
    # the first digit has to be 1, otherwise 5x and 6x will have more digits than x.
    # likewise, the second digits has to be between 1 and 6.

    # Actually... the first 6 significant digits of 1/7 will do.
    return 142857


@wrappy.probe()
def euler_problem_53(n=100, threshold=10 ** 6):
    """
    There are exactly ten ways of selecting three from five, 12345:
    123, 124, 125, 134, 135, 145, 234, 235, 245, and 345
    In combinatorics, we use the notation, 5C3=10.
    In general, nCr=n!r!(n−r)!, where r≤n, n!=n×(n−1)×...×3×2×1, and 0!=1.
    It is not until n=23, that a value exceeds one-million: 23C10=1144066.
    How many, not necessarily distinct, values of nCr for 1≤n≤100, are greater than one-million?
    """
    from subroutines import Combination

    comb = Combination()

    # with a cache we can efficiently calculate all the combinations
    count = 0
    for m in range(1, n + 1):
        for k in range(0, m + 1):
            if comb.n_choose_k(m, k) > threshold:
                count += 1
    return count


@wrappy.probe()
def euler_problem_54():
    """
    In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:
    High Card: Highest value card.
    One Pair: Two cards of the same value.
    Two Pairs: Two different pairs.
    Three of a Kind: Three cards of the same value.
    Straight: All cards are consecutive values.
    Flush: All cards of the same suit.
    Full House: Three of a kind and a pair.
    Four of a Kind: Four cards of the same value.
    Straight Flush: All cards are consecutive values of same suit.
    Royal Flush: Ten, Jack, Queen, King, Ace, in same suit.
    The cards are valued in the order:
    2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.
    If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.
    The file, poker.txt, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner.
    How many hands does Player 1 win?
    """
    from subroutines import TexasHoldem
    from custom_config import get_attachment_path

    t = TexasHoldem()

    def preprocess(line):
        """
        Preprocess a line from the input and return ten 'cards'.
        Example card: ('T', 'C') for 10 Clubs.
        """
        cards = [(_c[0], _c[1]) for _c in line.replace("\n", "").split(" ")]
        return cards

    # read input
    with open(get_attachment_path(54), "r") as f:
        lines = f.readlines()
        hands = [preprocess(_line) for _line in lines]
        A_hands = [_hand[:5] for _hand in hands]
        B_hands = [_hand[5:] for _hand in hands]

    # count games where player A wins
    count = 0
    for i in range(0, len(hands)):
        if t.evaluate_hand(A_hands[i]) > t.evaluate_hand(B_hands[i]):
            count += 1
    return count


@wrappy.probe()
def euler_problem_55(bound=10 ** 4, num_attempts=50):
    """
    If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.
    Not all numbers produce palindromes so quickly. For example,
    349 + 943 = 1292,
    1292 + 2921 = 4213
    4213 + 3124 = 7337
    That is, 349 took three iterations to arrive at a palindrome.
    Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).
    Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.
    How many Lychrel numbers are there below ten-thousand?
    NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.
    """
    from subroutines import is_a_palindrome, reverse_number

    def is_lychrel(num, attempts):
        """
        Determine if a number is Lychrel.
        """
        val = num
        for k in range(0, attempts):  # pylint: disable=unused-variable
            val += reverse_number(val)
            if is_a_palindrome(val):
                return False
        return True

    lychrel_numbers = []
    for num in range(1, bound):
        if is_lychrel(num, num_attempts):
            lychrel_numbers.append(num)
    return lychrel_numbers


@wrappy.probe()
def euler_problem_56(a_bound=10 ** 2, b_bound=10 ** 2):
    """
    A googol (10^100) is a massive number: one followed by one-hundred zeros; 100^100 is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.
    Considering natural numbers of the form, ab, where a, b < 100, what is the maximum digital sum?
    """
    from subroutines import DigitwiseInteger

    def digit_sum(a, b):
        """
        Calculate the sum of digits of a^b.
        """
        num = DigitwiseInteger(1)
        for k in range(0, b):  # pylint: disable=unused-variable
            num.multiply_by_constant(a, in_place=True)
        return sum(num.order_dict.values())

    # brute-force all combinations of a and b
    max_digital_sum = 0
    for a in range(1, a_bound + 1):
        for b in range(1, b_bound + 1):
            candidate = digit_sum(a, b)
            if candidate > max_digital_sum:
                max_digital_sum = candidate
    return max_digital_sum


def euler_problem_57(num_expansions=1000):
    """
    It is possible to show that the square root of two can be expressed as an infinite continued fraction.
    √ 2 = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...
    By expanding this for the first four iterations, we get:
    1 + 1/2 = 3/2 = 1.5
    1 + 1/(2 + 1/2) = 7/5 = 1.4
    1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
    1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...
    The next three expansions are 99/70, 239/169, and 577/408, but the eighth expansion, 1393/985, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.
    In the first one-thousand expansions, how many fractions contain a numerator with more digits than denominator?
    """

    def next_pair(numer, denom):
        """
        Compute the next pair of numerator and denominator, given the current pair.
        If you work this recurrence relation on scratch paper, it turns out to be:
        new_numer = numer + 2 * denom
        new_denom = numer + denom
        """
        # Here's why given numer and denom are coprime, the new pair will also be coprime:
        # Suppose the new pair has a common factor c. Then c divides the difference of the pair, which means c divides denom.
        # Then c divides the difference between (numer + denom) and denom, which means c divides numer.
        # Then numer and denom are not coprime, which is a contradiction.
        return numer + 2 * denom, numer + denom

    # initialize the count of qualified fractions to be returned
    count = 0
    # initialzie the zero-th expansion
    current_numer = 1
    current_denom = 1
    # iterate and count qualified fractions
    for k in range(1, num_expansions + 1):  # pylint: disable=unused-variable
        current_numer, current_denom = next_pair(current_numer, current_denom)
        if len(str(current_numer)) > len(str(current_denom)):
            count += 1
    return count


@wrappy.probe()
def euler_problem_58(threshold=0.1, trial_bound=10 ** 8):
    """
    Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.
    37 36 35 34 33 32 31
    38 17 16 15 14 13 30
    39 18  5  4  3 12 29
    40 19  6  1  2 11 28
    41 20  7  8  9 10 27
    42 21 22 23 24 25 26
    43 44 45 46 47 48 49
    It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ≈ 62%.
    If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?
    """
    # Suppose the diagonal terms are put into an array A.
    # The terms follow a pattern: A[i] = A[i-1] + 2 * ceil(i/4).
    from subroutines import all_primes_under, is_prime_given_primes
    from math import ceil, sqrt

    A = [1]

    def another_term():
        """
        Extend A[i].
        """
        A.append(A[-1] + 2 * ceil(len(A) / 4))
        return A[-1]

    divisor_bound = ceil(sqrt(trial_bound))
    # precompute all primes in an assumed range
    primes_list = all_primes_under(divisor_bound)
    # initialize a count of terms and primes, with the first term 1 already counted
    prime_count = 0
    # compute terms on the diagonal one by one, until primes are too sparse
    # keep computing till at least 15 terms
    while prime_count / len(A) >= threshold or len(A) < 15:
        _term = another_term()
        # if the term is out of assumed range, extend that range
        if _term > primes_list[-1] ** 2:
            divisor_bound *= 10
            primes_list = all_primes_under(divisor_bound)
        # if the term is prime, bump prime count
        if is_prime_given_primes(_term, primes_list):
            prime_count += 1
    # the side length is equal to the number of layers * 2 + 1
    return ceil((len(A) - 1) / 4) * 2 + 1


@wrappy.probe()
def euler_problem_59(valid_threshold=0.26):
    """
    Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.
    A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.
    For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both "halves", it is impossible to decrypt the message.
    Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.
    Your task has been made easy, as the encryption key consists of three lower case characters. Using p059_cipher.txt (right click and 'Save Link/Target As...'), a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.
    """
    from subroutines import xor_decipher
    from custom_config import get_attachment_path
    import re

    with open(get_attachment_path(59), "r") as f:
        ciphered = list(map(int, f.read().replace("\n", "").split(",")))

    # brute-force all combinations of possibly keys
    possible_keys = [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
    ]
    for _i in possible_keys:
        for _j in possible_keys:
            for _k in possible_keys:
                # take advantage of the frequency of a, e, i, o, and u
                candidate = xor_decipher(ciphered, [_i, _j, _k])
                valid_len = len(re.sub(r"[^aeiou]", "", candidate))
                if valid_len / len(candidate) > valid_threshold:
                    print(_i, _j, _k, candidate)
    # no value is returned; inspect printed results to find the answer.


@wrappy.probe()
def euler_problem_60(max_digits=4):
    """
    The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.
    Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.
    """
    # One could reduce this to a graph problem: if two primes concatenate to another prime, then those two primes have an edge connecting them. We are to look for the 5-clique with the lowest sum then.

    # There's another angle: any 5-clique contains a 4-clique. So the smallest 4-clique, which is already given, is a hugh clue.
    # Let's try assuming that (3, 7, 109, 673, ?) is the 5-clique that we are looking for.
    # Update: it turned out that this assumption was not true.
    from subroutines import all_primes_under, is_prime_given_primes, CliqueFinder

    def concat(a, b):
        """
        Concatenate two integers.
        """
        return int(str(a) + str(b))

    def get_adjacency_list():
        """
        Determine all the pairs of primes that, when concatenated, remain a prime.
        """
        adjacency_list = []
        for i, _p in enumerate(primes_list):  # pylint: disable=unused-variable
            connected = []
            for j, _q in enumerate(primes_list):
                if (
                    _p != _q
                    and is_prime_given_primes(concat(_p, _q), extended_primes_list)
                    and is_prime_given_primes(concat(_q, _p), extended_primes_list)
                ):
                    connected.append(j)
            adjacency_list.append(connected)
        return adjacency_list

    primes_list = all_primes_under(10 ** max_digits)
    extended_primes_list = all_primes_under(int(1.1 * 10 ** max_digits))

    finder = CliqueFinder(get_adjacency_list())
    indicies = finder.compute(5)
    answer = [tuple([primes_list[idx] for idx in t]) for t in list(indicies)]
    return answer


@wrappy.probe()
def euler_problem_61():
    """
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
    Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
    Square  	 	P4,n=n2	        	1, 4, 9, 16, 25, ...
    Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
    Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
    Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
    Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.
    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
    """
    from collections import defaultdict
    from itertools import permutations
    from subroutines import (
        get_triangulars,
        get_squares,
        get_pentagonals,
        get_hexagonals,
        get_heptagonals,
        get_octagonals,
    )

    polygonals = [
        (get_triangulars, "triangular"),
        (get_squares, "square"),
        (get_pentagonals, "pentagonal"),
        (get_hexagonals, "hexagonal"),
        (get_heptagonals, "heptagonal"),
        (get_octagonals, "octagonal"),
    ]

    def precompute():
        """
        Idea: use a cache to store the numbers satisfying each type and recording their first two digits.
        Example:
        {'triangular': {81: [8128]}, 'square': {82: [8281]}}
        """
        cache = dict()
        for function, code in polygonals:
            cache[code] = defaultdict(list)
            list_of_numbers = function(200)
            assert list_of_numbers[-1] >= 10000
            for _num in list_of_numbers:
                if 1000 <= _num < 10000:
                    _key = _num // 100
                    cache[code][_key].append(_num)
        return cache

    # Given a fixed order of traversing the six types, the problem is just a depth-first search that terminates upon finding a valid path of six elements
    def solve(cache, order):
        """
        Try to find a valid path given a precomputed cache of numbers of each type, and a specific order.
        Example order: ['triangular', 'square', 'pentagonal', 'hexagonal', 'heptagonal', 'octagonal']
        """

        def next_level_lookup(num, current_level):
            """
            Given a number, find possibilities on the next level.
            """
            assert current_level < len(order) - 1
            _lookup_key = num % 100
            return cache[order[current_level + 1]].get(_lookup_key, [])

        # DFS: for any element with level>0, the element immediately before it is on the level immediately before its level, and is connected to that element
        def DFS_subroutine(stack, answers):
            """
            The depth-first search subroutine for this problem.
            Uses an answer cache to store results from the piggybacked algorithm.
            """
            assert stack
            _num, _level = stack[-1]
            # special case: if already on the last level
            if _level == len(order) - 1:
                # check: if the cycle is complete
                if (_num % 100) == (stack[-len(order)][0] // 100):
                    answers.append(tuple([x[0] for x in stack[-len(order) :]]))
            else:
                # common case: recurse onto the next level
                for _connected in next_level_lookup(_num, _level):
                    _stack.append((_connected, _level + 1))
                    DFS_subroutine(stack, answers)
            stack.pop()

        # initialize the stack and a path
        _stack = []
        _answers = []
        for _key, _value_list in cache[order[0]].items():
            for _num in _value_list:
                _stack.append((_num, 0))
                DFS_subroutine(_stack, _answers)
        return _answers

    cache = precompute()
    types = [x[1] for x in polygonals]
    # Test every permutation of types
    for _extension in permutations(types[:-1]):
        _order = tuple(types[-1:] + list(_extension[:]))
        _paths = solve(cache, _order)
        print(_order, _paths)
        if _paths:
            return _paths
    return -1


@wrappy.probe()
def euler_problem_62(k=5, power=3, max_base_digits=4):
    """
    The cube, 41063625 (345^3), can be permuted to produce two other cubes: 56623104 (384^3) and 66430125 (405^3). In fact, 41063625 is the smallest cube which has exactly three permutations of its digits which are also cube.
    Find the smallest cube for which exactly five permutations of its digits are cube.
    """
    # idea: to determine the number of permutations, we can sort the digits of each number and use that as a hash key.
    from collections import defaultdict

    def permute_to_ascending(num):
        """
        Example:
        312 -> '123'
        """
        return "".join(sorted(list(str(num))))

    # note that any group of qualified numbers must have the same number of digits, which means they must also have the same number of digits in their base for any positive integer power
    for num_digits in range(1, max_base_digits):
        perm_frequency = defaultdict(list)
        # iterate through all the numbers with the same number of digits in their base
        for _base in range(10 ** (num_digits - 1), 10 ** num_digits - 1):
            value = int(_base ** power)
            perm_frequency[permute_to_ascending(value)].append(value)
        # examine if any permutation showed up exactly the required number of times
        for _perm, _terms in perm_frequency.items():
            if len(_terms) == k:
                return _terms
    return -1


@wrappy.probe()
def euler_problem_63():
    """
    The 5-digit number, 16807=7^5, is also a fifth power. Similarly, the 9-digit number, 134217728=8^9, is a ninth power.
    How many n-digit positive integers exist which are also an nth power?
    """
    # Note that if the base is greater than or equal to 10, then the number of powers will never catch up with the number of digits.
    # On the other side, if the base of less than 10, then the number of powers catches up with the number of digits exactly once, although it could be on multiple consecutive powers.
    count = 0
    # brute force all powers of 1 to 9, terminating when the number of digits falls behind
    for _base in range(1, 10):
        _power = 1
        while _power <= len(str(int(_base ** _power))):
            if _power == len(str(int(_base ** _power))):
                count += 1
            _power += 1
    return count


@wrappy.probe()
def euler_problem_64(bound=10 ** 4):
    """
    All square roots are periodic when written as continued fractions and can be written in the form:
    √N = a0 + 1 / (a1 + 1 / (a2 + (1 / (a3 + …

    ...

    Exactly four continued fractions, for N≤13, have an odd period.
    How many continued fractions for N≤10000 have an odd period?

    The equations don't show very well in text editors. Go to:
    https://projecteuler.net/problem=64
    for the original problem description.
    """
    from subroutines import continued_fraction_representation
    from decimal import Decimal, getcontext
    from math import sqrt

    # initialize the number of numbers that have odd periods
    count = 0
    # extend precision
    getcontext().prec = 10 * int(sqrt(bound))
    # call subroutine to get a sequence representation with loop detection
    for num in range(1, bound + 1):
        sequence, loop_start, loop_end = continued_fraction_representation(
            Decimal(num).sqrt()
        )
        if loop_start is not None:
            assert loop_end is not None
            period = loop_end - loop_start
            if period % 2 == 1:
                count += 1
        else:
            if len(sequence) > 10:
                raise ValueError
    return count


@wrappy.probe()
def euler_problem_65(n_th_convergent=100):
    """
    The square root of 2 can be written as an infinite continued fraction.

    √2 = 1 + 1 / (2 + 1 / (2 + 1 / (2 + 1 / (2+...
    The infinite continued fraction can be written, √2 = [1;(2)], (2) indicates that 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].
    It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations.
    What is most surprising is that the important mathematical constant,
    e = [2;1,2,1,1,4,1,1,6,1,...,1,2k,1,...].
    Find the sum of digits in the numerator of the 100th convergent of the continued fraction for e.

    The equations don't show very well in text editors. Go to:
    https://projecteuler.net/problem=65
    for the original problem description.
    """
    # Consider the first few terms:
    # a0 = 2 + [] = 2
    # a1 = 2 + 1 / (1 + []) = 3
    # a2 = 2 + 1 / (1 + 1 / (2 + [])) = 2 + 1 / (1 + 1/2) = 8 / 3
    from subroutines import compile_continued_fraction_representation

    def build_sequence_for_e(num_terms=100):
        """
        Build the integer sequence for e.
        """
        # initialize the sequence to be returned
        sequence = []
        # build terms in the following manner: 1, 2, 1,   1, 4, 1,   1, 6, 1, ...
        current_middle_in_triple = 2
        while len(sequence) < num_terms:
            sequence.append(1)
            sequence.append(current_middle_in_triple)
            sequence.append(1)
            current_middle_in_triple += 2
        return sequence[:num_terms]

    return 2 + compile_continued_fraction_representation(
        build_sequence_for_e(num_terms=n_th_convergent - 1)
    )


@wrappy.probe()
def euler_problem_66(bound=1000):
    """
    Consider quadratic Diophantine equations of the form:
    x^2 – D×y^2 = 1
    For example, when D=13, the minimal solution in x is 649^2 – 13×180^2 = 1.
    It can be assumed that there are no solutions in positive integers when D is square.
    By finding minimal solutions in x for D = {2, 3, 5, 6, 7}, we obtain the following:
    3^2 – 2×2^2 = 1
    2^2 – 3×1^2 = 1
    9^2 – 5×4^2 = 1
    5^2 – 6×2^2 = 1
    8^2 – 7×3^2 = 1
    Hence, by considering minimal solutions in x for D ≤ 7, the largest x is obtained when D=5.
    Find the value of D ≤ 1000 in minimal solutions of x for which the largest value of x is obtained.
    """
    from subroutines import solve_pells_equation

    best_d, best_x, best_y = 0, 0, 0
    for _d in range(2, bound + 1):
        _x, _y = solve_pells_equation(_d)
        if _x > best_x:
            best_d, best_x, best_y = _d, _x, _y
        print(_d, _x, _y)
    return {"D": best_d, "x": best_x, "y": best_y}


@wrappy.probe()
def euler_problem_67():
    """
    By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
    3
    7 4
    2 4 6
    8 5 9 3
    That is, 3 + 7 + 4 + 9 = 23.
    Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a 15K text file containing a triangle with one-hundred rows.
    """
    from custom_config import get_attachment_path
    from subroutines import max_sum_path_in_triangle

    with open(get_attachment_path(67), "r") as f:
        inp_arr = f.read()
    # turn raw input into a triangular array
    arr = [
        [int(_z) for _z in _y.split(" ") if len(_z) > 0] for _y in inp_arr.split("\n")
    ]
    arr = [_l for _l in arr if len(_l) > 0]
    return max_sum_path_in_triangle(arr)


@wrappy.probe()
def euler_problem_69(bound=10 ** 6):
    """
    Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of numbers less than n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.

    n	Relatively Prime	φ(n)	n/φ(n)
    2	1                	1	    2
    3	1,2	                2   	1.5
    4	1,3	                2   	2
    5	1,2,3,4	            4	    1.25
    6	1,5	                2	    3
    7	1,2,3,4,5,6	        6	    1.1666...
    8	1,3,5,7	            4	    2
    9	1,2,4,5,7,8	        6	    1.5
    10	1,3,7,9	            4	    2.5
    It can be seen that n=6 produces a maximum n/φ(n) for n ≤ 10.

    Find the value of n ≤ 1,000,000 for which n/φ(n) is a maximum.
    """
    from subroutines import Factorizer, euler_totient

    fac = Factorizer(bound=bound)

    # initialize the answer to be returned
    max_ratio, best_num = 1.0, 0

    for num in range(2, bound + 1):
        factors = fac.factorize(num).keys()
        ratio = num / euler_totient(num, factors)
        if ratio > max_ratio:
            max_ratio, best_num = ratio, num
    return max_ratio, best_num


@wrappy.probe()
def euler_problem_70(bound=10 ** 7):
    """
    Euler's Totient function, φ(n) [sometimes called the phi function], is used to determine the number of positive numbers less than or equal to n which are relatively prime to n. For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, φ(9)=6.
    The number 1 is considered to be relatively prime to every positive number, so φ(1)=1.
    Interestingly, φ(87109)=79180, and it can be seen that 87109 is a permutation of 79180.
    Find the value of n, 1 < n < 10^7, for which φ(n) is a permutation of n and the ratio n/φ(n) produces a minimum.
    """
    from subroutines import Factorizer, euler_totient, related_by_digit_permutation

    fac = Factorizer(bound)

    # initialize the answer to be returned
    min_ratio, best_num = -1.0, 0
    for num in range(2, bound):
        factors = fac.factorize(num).keys()
        totient = euler_totient(num, factors)
        ratio = num / totient
        if related_by_digit_permutation(num, totient):
            if min_ratio < 0 or ratio < min_ratio:
                print(num, totient)
                min_ratio, best_num = ratio, num
    return min_ratio, best_num


@wrappy.probe()
def euler_problem_71(bound=10 ** 6):
    """
    Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1, it is called a reduced proper fraction.
    If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:
    1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
    It can be seen that 2/5 is the fraction immediately to the left of 3/7.
    By listing the set of reduced proper fractions for d ≤ 1,000,000 in ascending order of size, find the numerator of the fraction immediately to the left of 3/7.
    """

    def brute_force():  # pylint: disable=unused-variable
        """
        idea: we only have to consider denominators indivisible by 7, and numerators right below (3/7) * denominator.
        """
        from math import floor
        from fractions import Fraction

        best_ratio, target = Fraction(0, 1), Fraction(3, 7)
        for denom in range(2, bound + 1):
            # skip denominators divisible by 7
            if denom % 7 == 0:
                continue
            numer = floor((3 / 7) * denom)
            ratio = Fraction(numer, denom)
            assert ratio < target
            if ratio > best_ratio:
                best_ratio = ratio
        return best_ratio.numerator, best_ratio.denominator

    def insightful():
        """
        idea: actually, we can keep adding 3 to the numerator, and 7 to the denominator. Doing this starting from 2/5 will produce the closest lower estimate of 3/7.
        """
        denom = 7 * (bound // 7) + 5
        # make sure that denom is right below bound
        if denom > bound:
            denom -= 7
        numer = 3 * (denom // 7) + 2
        return numer, denom

    return insightful()


@wrappy.probe()
def euler_problem_72(bound=10 ** 6):
    """
    Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1, it is called a reduced proper fraction.
    If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:
    1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
    It can be seen that there are 21 elements in this set.
    How many elements would be contained in the set of reduced proper fractions for d ≤ 1,000,000?
    """
    # idea: for each denominator, the numerator needs to be coprime to it.
    from subroutines import Factorizer, euler_totient

    fac = Factorizer(bound)

    count = 0
    for num in range(2, bound + 1):
        factors = fac.factorize(num).keys()
        totient = euler_totient(num, factors)
        count += totient
    return count


@wrappy.probe()
def euler_problem_73(bound=12000):
    """
    Consider the fraction, n/d, where n and d are positive integers. If n<d and HCF(n,d)=1, it is called a reduced proper fraction.
    If we list the set of reduced proper fractions for d ≤ 8 in ascending order of size, we get:
    1/8, 1/7, 1/6, 1/5, 1/4, 2/7, 1/3, 3/8, 2/5, 3/7, 1/2, 4/7, 3/5, 5/8, 2/3, 5/7, 3/4, 4/5, 5/6, 6/7, 7/8
    It can be seen that there are 3 fractions between 1/3 and 1/2.
    How many fractions lie between 1/3 and 1/2 in the sorted set of reduced proper fractions for d ≤ 12,000?
    """
    # Take advantage of Farey sequences, which are monotonic sequences of reduced proper fractions with denominator below a bound.
    from fractions import Fraction
    from math import floor

    # initialize two fractions, one being 1/3 and the other being the eligible fraction just above it
    frac_1 = Fraction(1, 3)
    frac_2 = min(
        Fraction(bound // 3, bound // 3 * 3 - 1), Fraction(bound // 3 + 1, bound)
    )

    count = 0
    while not frac_2 >= 1 / 2:
        if count % 100000 == 0:
            print(count)
        assert frac_2 > frac_1
        count += 1
        coeff = floor((bound + frac_1.denominator) / frac_2.denominator)
        numer = coeff * frac_2.numerator - frac_1.numerator
        denom = coeff * frac_2.denominator - frac_1.denominator
        frac_1 = frac_2
        frac_2 = Fraction(numer, denom)
    return count


@wrappy.probe()
def euler_problem_74(bound=1000000, target_length=60):
    """
    The number 145 is well known for the property that the sum of the factorial of its digits is equal to 145:
    1! + 4! + 5! = 1 + 24 + 120 = 145
    Perhaps less well known is 169, in that it produces the longest chain of numbers that link back to 169; it turns out that there are only three such loops that exist:
    169 → 363601 → 1454 → 169
    871 → 45361 → 871
    872 → 45362 → 872
    It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,
    69 → 363600 → 1454 → 169 → 363601 (→ 1454)
    78 → 45360 → 871 → 45361 (→ 871)
    540 → 145 (→ 145)
    Starting with 69 produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.
    How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?
    """
    # idea: the for any number p, the next number can be pre-computed for fast lookup
    from subroutines import factorial

    # idea: we want both lookup and ordering when computing the chain
    from collections import OrderedDict

    @wrappy.memoize(cache_limit=bound * 2)
    def transform(num):
        digits = [int(_d) for _d in list(str(num))]
        return sum([factorial(_d) for _d in digits])

    # we can also cache the chain length for any number already computed.
    # this however is not as clean as using a decorator.

    # cache what we already know
    # note that ALL other numbers are not in a loop (except maybe self-loops)
    chain_length_cache = {
        169: 3,
        363601: 3,
        1454: 3,
        871: 2,
        45361: 2,
        872: 2,
        45362: 2,
    }

    def chain_length(num):
        """
        Calculate the chain length starting from num.
        """
        # easy case: precomputed
        if num in chain_length_cache:
            return chain_length_cache[num]

        # common case: use a list to keep track of numbers that have shown up
        # and to store corrections to their respective chain lengths
        current = num
        prev = -1
        seen = []
        while not current in chain_length_cache and not prev == current:
            seen.append(current)
            prev = current
            current = transform(current)
        # note that 'current' is now a number whose chain length we know
        if current in chain_length_cache:
            cached_length = chain_length_cache[current]
        else:
            assert prev == current
            cached_length = 0

        # all seen terms get their chain lengths based on their index
        for i, _term in enumerate(seen):
            chain_length_cache[_term] = len(seen) - i + cached_length

        return chain_length_cache[num]

    # loop through all possible candidates
    qualified = []
    for candidate in range(1, bound):
        length = chain_length(candidate)
        if length == target_length:
            qualified.append(candidate)

    return qualified, len(qualified)


@wrappy.probe()
def euler_problem_75(bound=1500000):
    """
    It turns out that 12 cm is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples.
    12 cm: (3,4,5)
    24 cm: (6,8,10)
    30 cm: (5,12,13)
    36 cm: (9,12,15)
    40 cm: (8,15,17)
    48 cm: (12,16,20)
    In contrast, some lengths of wire, like 20 cm, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using 120 cm it is possible to form exactly three different integer sided right angle triangles.
    120 cm: (30,40,50), (20,48,52), (24,45,51)
    Given that L is the length of the wire, for how many values of L ≤ 1,500,000 can exactly one integer sided right angle triangle be formed?
    """
    from subroutines import pythagorean_triplets
    from collections import defaultdict

    # the greatest term in the triplet is up to half the bound L.
    coprime_triplets = pythagorean_triplets(bound // 2)

    # use a defaultdict to hold counts of different combinations for each L
    combo_lookup = defaultdict(int)

    # iterate through all triplets and their multiples
    for _a, _b, _c in coprime_triplets:
        _atomic_sum = _a + _b + _c
        _coeff = 1
        _sum = _coeff * _atomic_sum
        while _sum <= bound:
            combo_lookup[_sum] += 1
            _coeff += 1
            _sum = _coeff * _atomic_sum

    # check the number of combinations
    qualified_lengths = [_key for _key, _value in combo_lookup.items() if _value == 1]

    return qualified_lengths, len(qualified_lengths)


@wrappy.probe()
def euler_problem_76(n=100):
    """
    It is possible to write five as a sum in exactly six different ways:
    4 + 1
    3 + 2
    3 + 1 + 1
    2 + 2 + 1
    2 + 1 + 1 + 1
    1 + 1 + 1 + 1 + 1
    How many different ways can one hundred be written as a sum of at least two positive integers?
    """
    # idea: use dynamic programming.
    from subroutines import num_desc_seq_given_total_and_head as subproblem

    total = 0
    for _head in range(1, n):
        total += subproblem(n, _head)

    return total


@wrappy.probe()
def euler_problem_77(thresh=5000, bound=10000):
    """
    It is possible to write ten as the sum of primes in exactly five different ways:
    7 + 3
    5 + 5
    5 + 3 + 2
    3 + 3 + 2 + 2
    2 + 2 + 2 + 2 + 2
    What is the first value which can be written as the sum of primes in over five thousand different ways?
    """
    # idea: use dynamic programming.
    from subroutines import (
        num_desc_prime_seq_given_total_and_head as subproblem,
        all_primes_under,
    )

    list_of_primes = all_primes_under(bound)
    set_of_primes = set(list_of_primes)

    # search for the solution within specified bound
    for candidate_sum in range(bound):
        num_seq = 0
        # enumerate all possible leading terms
        for _head in list_of_primes:
            if _head > candidate_sum:
                break
            else:
                num_seq += subproblem(
                    candidate_sum, _head, list_of_primes, set_of_primes
                )
        if num_seq > thresh:
            return candidate_sum

    return None


@wrappy.todo()
def euler_problem_78(n=1000000):
    """
    Let p(n) represent the number of different ways in which n coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so p(5)=7.
    OOOOO
    OOOO   O
    OOO   OO
    OOO   O   O
    OO   OO   O
    OO   O   O   O
    O   O   O   O   O
    Find the least value of n for which p(n) is divisible by one million.
    """


@wrappy.probe()
def euler_problem_79():
    """
    A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.
    The text file, keylog.txt, contains fifty successful login attempts.
    Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.
    """
    # idea: successful logins describe the order of digits.
    # see this as a directed graph problem where each edge describes a 'preceeds' relationship.
    # if there are no repeated digits, then the graph should be acyclic.
    # topological sort gives the final answer.
    from custom_config import get_attachment_path
    from subroutines import DFS_TS
    from collections import defaultdict

    # keep track of graph edges and which nodes must be present
    from_to = defaultdict(set)
    seen_digits = set()
    with open(get_attachment_path(79), "r") as f:
        logins = f.read().split("\n")
        logins = [_s for _s in logins if _s]
        for _login in logins:
            first, second, third = int(_login[0]), int(_login[1]), int(_login[2])
            from_to[first].add(second)
            from_to[first].add(third)
            from_to[second].add(third)
            seen_digits.add(first)
            seen_digits.add(second)
            seen_digits.add(third)

    # build adjacency list
    adjacency_list = [[]] * 10
    for _from, _to_set in from_to.items():
        _neighbors = sorted(list(_to_set))
        adjacency_list[_from] = _neighbors

    # run topological sort on digits that must be present
    labels = DFS_TS(adjacency_list)
    ordered_digits = sorted(list(seen_digits), key=lambda d: labels[d])
    return ordered_digits


@wrappy.probe()
def euler_problem_80(bound=100, keep_digits=100):
    """
    It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.
    The square root of two is 1.41421356237309504880..., and the digital sum of the first one hundred decimal digits is 475.
    For the first one hundred natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots.
    """
    # idea: one could get to 100 digits easily with binary search.
    # here however... just use decimal.
    from decimal import Decimal, getcontext
    from math import log

    # make sure that the decimals have enough significant digits
    getcontext().prec = 5 + keep_digits + int(log(bound, 10))

    def solve():
        total_sum = 0
        for num in range(1, bound + 1):
            decimal_sqrt = Decimal(num).sqrt()
            if decimal_sqrt != int(decimal_sqrt):
                digits_that_count = str(decimal_sqrt).replace(".", "")[:keep_digits]
                total_sum += sum(list(map(int, list(digits_that_count))))
        return total_sum

    return solve()


@wrappy.probe()
def euler_problem_81():
    """
    The equations don't show very well in text editors. Go to:
    https://projecteuler.net/problem=81
    for the original problem description.
    """
    from subroutines import LatticeGraph2D

    def parse_input_to_matrix():
        from custom_config import get_attachment_path

        with open(get_attachment_path(81), "r") as f:
            inp_arr = f.read()
        # turn raw input into an  array
        arr = [
            [int(_z) for _z in _y.split(",") if len(_z) > 0]
            for _y in inp_arr.split("\n")
        ]
        arr = [_l for _l in arr if len(_l) > 0]
        return arr

    def get_neighbor_indices(i, j, i_dim, j_dim):
        assert i < i_dim and j < j_dim
        neighbors = []
        # allowed to move down or to the right
        if i < i_dim - 1:
            neighbors.append((i + 1, j))
        if j < j_dim - 1:
            neighbors.append((i, j + 1))
        return neighbors

    def get_edge_weight(
        matrix, head_i, head_j, tail_i, tail_j
    ):  # pylint: disable=unused-argument
        return matrix[tail_i][tail_j]

    def solve():
        matrix = parse_input_to_matrix()
        lattice = LatticeGraph2D(
            **{
                "matrix": matrix,
                "neighbor_function": get_neighbor_indices,
                "weight_function": get_edge_weight,
            }
        )
        distances, paths = lattice.dijkstra_shortest_paths(0, 0)
        return (
            matrix[0][0] + distances[-1],
            [lattice.unflatten_index(idx) for idx in paths[-1]],
        )

    return solve()


@wrappy.probe()
def euler_problem_82():
    """
    The equations don't show very well in text editors. Go to:
    https://projecteuler.net/problem=82
    for the original problem description.
    """
    from subroutines import LatticeGraph2D

    def parse_input_to_matrix():
        from custom_config import get_attachment_path

        with open(get_attachment_path(82), "r") as f:
            inp_arr = f.read()
        # turn raw input into an  array
        arr = [
            [int(_z) for _z in _y.split(",") if len(_z) > 0]
            for _y in inp_arr.split("\n")
        ]
        arr = [_l for _l in arr if len(_l) > 0]
        return arr

    def get_neighbor_indices(i, j, i_dim, j_dim):
        assert i < i_dim and j < j_dim
        neighbors = []
        # allowed to move up, down, or to the right
        if i > 0:
            neighbors.append((i - 1, j))
        if i < i_dim - 1:
            neighbors.append((i + 1, j))
        if j < j_dim - 1:
            neighbors.append((i, j + 1))
        return neighbors

    def get_edge_weight(
        matrix, head_i, head_j, tail_i, tail_j
    ):  # pylint: disable=unused-argument
        return matrix[tail_i][tail_j]

    def solve():
        matrix = parse_input_to_matrix()
        lattice = LatticeGraph2D(
            **{
                "matrix": matrix,
                "neighbor_function": get_neighbor_indices,
                "weight_function": get_edge_weight,
            }
        )
        best_dist = None
        best_path = None
        # scan through possibilities connecting the first column and the last column
        for source_row_idx in range(0, lattice.row_dim):
            distances, paths = lattice.dijkstra_shortest_paths(source_row_idx, 0)
            for destination_row_idx in range(0, lattice.row_dim):
                destination_flattened_idx = lattice.flatten_index(
                    destination_row_idx, lattice.col_dim - 1
                )
                _dist = matrix[source_row_idx][0] + distances[destination_flattened_idx]
                if best_dist is None or _dist < best_dist:
                    best_dist, best_path = _dist, paths[destination_flattened_idx]
        return best_dist, [lattice.unflatten_index(idx) for idx in best_path]

    return solve()


@wrappy.probe()
def euler_problem_83():
    """
    The equations don't show very well in text editors. Go to:
    https://projecteuler.net/problem=83
    for the original problem description.
    """
    from subroutines import LatticeGraph2D

    def parse_input_to_matrix():
        from custom_config import get_attachment_path

        with open(get_attachment_path(83), "r") as f:
            inp_arr = f.read()
        # turn raw input into an  array
        arr = [
            [int(_z) for _z in _y.split(",") if len(_z) > 0]
            for _y in inp_arr.split("\n")
        ]
        arr = [_l for _l in arr if len(_l) > 0]
        return arr

    def get_neighbor_indices(i, j, i_dim, j_dim):
        assert i < i_dim and j < j_dim
        neighbors = []
        # allowed to move up, down, to the left, or to the right
        if i > 0:
            neighbors.append((i - 1, j))
        if i < i_dim - 1:
            neighbors.append((i + 1, j))
        if j > 0:
            neighbors.append((i, j - 1))
        if j < j_dim - 1:
            neighbors.append((i, j + 1))
        return neighbors

    def get_edge_weight(
        matrix, head_i, head_j, tail_i, tail_j
    ):  # pylint: disable=unused-argument
        return matrix[tail_i][tail_j]

    def solve():
        matrix = parse_input_to_matrix()
        lattice = LatticeGraph2D(
            **{
                "matrix": matrix,
                "neighbor_function": get_neighbor_indices,
                "weight_function": get_edge_weight,
            }
        )
        distances, paths = lattice.dijkstra_shortest_paths(0, 0)
        return (
            matrix[0][0] + distances[-1],
            [lattice.unflatten_index(idx) for idx in paths[-1]],
        )

    return solve()


@wrappy.probe()
def euler_problem_85(target=2000000):
    """
    The description doesn't show very well in text editors. Go to:
    https://projecteuler.net/problem=85
    for the original problem description.
    """
    # idea: sliding window
    def num_rectangles_given_size(h_outer, v_outer, h_inner, v_inner):
        """
        Get the number of inner rectangles given the inner and outer dimensions.
        """
        hori_count = h_outer - h_inner + 1
        vert_count = v_outer - v_inner + 1
        return hori_count * vert_count

    def num_rectangles(h_outer, v_outer):
        count = 0
        for h_inner in range(1, h_outer + 1):
            for v_inner in range(1, v_outer + 1):
                count += num_rectangles_given_size(h_outer, v_outer, h_inner, v_inner)
        return count

    # initialize the final answer
    min_diff = -1
    best_area = 0
    best_shape = {0, 0}

    # without loss of generality, assume the outer rectangle has greater size horizontally than vertically; keep incrementing until going beyond the target
    h_length = 1
    terminate = False
    while True:
        v_length = 1
        while v_length < h_length:
            num_rec = num_rectangles(h_length, v_length)
            diff = abs(num_rec - target)

            # update best solution so far
            if diff < min_diff or min_diff < 0:
                min_diff = diff
                best_area = h_length * v_length
                best_shape = (h_length, v_length)

            # end v-loop when above target
            if num_rec > target:
                # end h-loop when above target with v=1
                if v_length == 1:
                    terminate = True
                break
            v_length += 1
        if terminate:
            break
        h_length += 1

    return min_diff, best_area, best_shape

@wrappy.probe()
def euler_problem_86(target=1000000, bound=10000):
    """
    The description doesn't show very well in text editors. Go to:
    https://projecteuler.net/problem=86
    for the original problem description.
    """
    # idea: without loss of generality, suppose we have a cuboid with dimensions (a, b, c) where a <= b <= c.
    # This is really a 2-D problem if we fold the (exactly 2) faces that the shortest path goes through.
    # The shortest distance, d, always satisfied that d^2 = (a + b)^2 + c^2.
    # -> this is just Pythagorean with a+b being anything between 2 and 2c.
    # -> d is at most sqrt(5) * c.
    
    from subroutines import pythagorean_triplets
    # compute all triplets under some bound
    triplets = pythagorean_triplets(3 * bound)
    # sort triplets for convience later
    triplets = sorted(triplets, key=lambda t: t[0])
    
    def triplet_to_num_combinations(low, mid, high, thresh):
        '''
        Given a triplet, determine the number of possible (a, b, c) combinations where c is bounded by a threshold.
        '''
        assert low ** 2 + mid ** 2 == high ** 2
        # if mid > 2 * low, then mid must be c; split low between a and b with a <= b; e.g. for low=7, mid=24, high=25, c=24 and a can be 1, 2, or 3
        if mid > 2 * low:
            return (low // 2) if mid <= thresh else 0
        else:
            count = 0
            # case where c=mid: split low between a and b with a <= b
            count += (low // 2) if mid <= thresh else 0
            # case where c=low: b goes from (mid+1) // 2 to low, inclusively
            count += (low - (mid + 1) // 2 + 1) if low <= thresh else 0
            return count
    
    def num_valid_combinations(thresh):
        '''
        Subroutine for binary search.
        '''
        count = 0
        for _triplet in triplets:
            # consider each triplet and its multiples
            _low, _mid, _high = _triplet
            # terminate if c is definitely above the threshold
            # note that triplets are sorted by _low, so we terminate the loop
            if _low > thresh:
                break
            _coeff = 1
            while True:
                _l, _m, _h = _low * _coeff, _mid * _coeff, _high * _coeff
                num_combinations = triplet_to_num_combinations(_l, _m, _h, thresh)
                # stop trying more multiples if no contribution found
                if num_combinations == 0:
                    break
                else:
                    count += num_combinations
                    _coeff += 1
        return count
    
    def binary_search(lower, upper):
        '''
        Binary search solution.
        '''
        # base case: search window is small enough
        if upper - lower <= 1:
            print(num_valid_combinations(upper))
            print(num_valid_combinations(lower))
            return upper
        
        # sanity check
        assert num_valid_combinations(lower) < target
        assert num_valid_combinations(upper) > target
        
        middle = (upper + lower) // 2
        pivot = num_valid_combinations(middle)
        if pivot > target:
            return binary_search(lower, middle)
        elif pivot == target:
            return middle
        else:
            return binary_search(middle, upper)
        
    return binary_search(1, bound)

@wrappy.probe()
def euler_problem_87(bound=int(5e7)):
    '''
    The smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is 28. In fact, there are exactly four numbers below fifty that can be expressed in such a way:
    28 = 2^2 + 2^3 + 2^4
    33 = 3^2 + 2^3 + 2^4
    49 = 5^2 + 2^3 + 2^4
    47 = 2^2 + 3^3 + 2^4
    How many numbers below fifty million can be expressed as the sum of a prime square, prime cube, and prime fourth power?
    '''
    # idea: we need to consider only the prime numbers below the square, cubic, and quadruple order roots of the bound; looping over all the possibilities takes O(n^(1/2 + 1/3 + 1/4)) = O(n^(13/12))

    from subroutines import all_primes_under
    from math import ceil

    # precompute all the primes in the desired range
    limit_square = ceil(bound ** (1/2))
    limit_cubic = ceil(bound ** (1/3))
    limit_quadruple = ceil(bound ** (1/4))

    primes_square = all_primes_under(limit_square)
    primes_cubic = [_p for _p in primes_square if _p < limit_cubic]
    primes_quadruple = [_p for _p in primes_square if _p < limit_quadruple]

    qualified = set()
    # take advantage that the lists of primes are in ascending order
    for _p_sq in primes_square:
        _square = _p_sq ** 2

        for _p_cu in primes_cubic:
            _cubic = _p_cu ** 3

            # early stopping
            if _square + _cubic >= bound:
                break

            for _p_qu in primes_quadruple:
                _quadruple = _p_qu ** 4

                num = _square + _cubic + _quadruple
                if num < bound:
                    qualified.add(num)
                else:
                    # early stopping
                    break
    
    return len(qualified)

@wrappy.todo("The approach is incorrect in the iterative approach to find next the k'. One might need to consider swapping factors, which is much more complicated.")
@wrappy.probe()
def euler_problem_88(bound=12000):
    '''
    A natural number, N, that can be written as the sum and product of a given set of at least two natural numbers, {a1, a2, ... , ak} is called a product-sum number: N = a1 + a2 + ... + ak = a1 × a2 × ... × ak.
    For example, 6 = 1 + 2 + 3 = 1 × 2 × 3.
    For a given set of size, k, we shall call the smallest N with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, k = 2, 3, 4, 5, and 6 are as follows.
    k=2: 4 = 2 × 2 = 2 + 2
    k=3: 6 = 1 × 2 × 3 = 1 + 2 + 3
    k=4: 8 = 1 × 1 × 2 × 4 = 1 + 1 + 2 + 4
    k=5: 8 = 1 × 1 × 2 × 2 × 2 = 1 + 1 + 2 + 2 + 2
    k=6: 12 = 1 × 1 × 1 × 1 × 2 × 6 = 1 + 1 + 1 + 1 + 2 + 6
    Hence for 2≤k≤6, the sum of all the minimal product-sum numbers is 4+6+8+12 = 30; note that 8 is only counted once in the sum.
    In fact, as the complete set of minimal product-sum numbers for 2≤k≤12 is {4, 6, 8, 12, 15, 16}, the sum is 61.
    What is the sum of all the minimal product-sum numbers for 2≤k≤12000?
    '''

    from subroutines import least_divisor, has_nontrivial_divisor, Factorizer
    # the greatest possible minimal product-sum for k cannot exceed 2 * k
    fac = Factorizer(2 * bound + 1)
    
    class Solution(object):
        '''
        Data structure specifically for this problem.
        Components:
        - traditional factorization
        - all the product-sum factorizations 
        '''
        def __init__(self, num, cache):
            '''
            cache - stores Solution objects corresponding to solved numbers.
            '''
            divisor = least_divisor(num)
            if divisor == num:
                self.sequences = [(num)]
            else:
                quotient = num // divisor
                sub_solution = cache[quotient]

    class Sequence(object):
        def __init__(self, factors):
            '''
            Create a product-sum sequence from non-1 factors.
            '''
            self.factors = factors
            factors_sum = 0
            product = 1
            for _factor in self.factors:
                product *= _factor
                factors_sum += _factor
            self.product = product
            self.padding = product - factors_sum

        def view(self):
            '''
            The product-sum representation.
            '''
            return [1] * self.padding + self.factors

        def k(self):
            '''
            The number of terms in the product-sum representation.
            '''
            return self.padding + len(self.factors)

        def __mul__(self, coeff):
            '''
            Multiply self by a coefficient and return.
            Adjust padding according to the new product.
            '''
            factors = self.factors[:]
            factors.append(coeff)
            seq = Sequence(factors)
            return seq

    k_to_min_product = dict()
    # start checking numbers from 4, the smallest composite
    candidate = 4
    # keep trying greater numbers until answers don't receive updates for a while
    tolerance = 1000
    flag_for_more_candidates = True
    while flag_for_more_candidates:
        # skip prime numbers
        if not has_nontrivial_divisor(candidate):
            candidate += 1
            continue

        seq = Sequence(candidate)
        # keep finding greater k until it does not exist
        flag_for_greater_k = True

        while flag_for_greater_k:
            _k = seq.k()
            # stop if k is too large
            if _k > bound:
                break
            # update solution for k if not previously found
            if not _k in k_to_min_product:
                k_to_min_product[_k] = candidate
                most_recent_valid_candidate = candidate
            flag_for_greater_k = seq.grow()
        
        candidate += 1
        if  candidate - most_recent_valid_candidate > tolerance:
            break

    minimal_products = set([k_to_min_product[_key] for _key in range(2, bound+1)])
    print(k_to_min_product)
    print(minimal_products)
    return sum(minimal_products)

@wrappy.probe()
def euler_problem_92(bound=int(1e+7)):
    '''
    A number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before.
    For example,
    44 → 32 → 13 → 10 → 1 → 1
    85 → 89 → 145 → 42 → 20 → 4 → 16 → 37 → 58 → 89
    Therefore any chain that arrives at 1 or 89 will become stuck in an endless loop. What is most amazing is that EVERY starting number will eventually arrive at 1 or 89.
    How many starting numbers below ten million will arrive at 89?
    '''
    from collections import defaultdict

    @wrappy.memoize(cache_limit=bound)
    def transform(num):
        digits = [int(_d) for _d in str(num)]
        return sum([_d ** 2 for _d in digits])

    # use a cache for lookup
    cache = {}

    def num_to_loop_start(num, seen):
        # base case: num itself is the loop start
        if num in seen:
            cache[num] = num
            return num

        # base case: loop start for num has been computed before
        if num in cache:
            return cache[num]

        # common case: keep track of seen numbers and go on
        seen.add(num)
        next_in_line = transform(num)
        loop_start = num_to_loop_start(next_in_line, seen)
        cache[num] = loop_start
        return loop_start

    solution = defaultdict(int)
    for num in range(1, bound):
        if num % 500000 == 0:
            print(num)
        loop_start = num_to_loop_start(num, seen=set())
        solution[loop_start] += 1

    return solution

@wrappy.probe()
def euler_problem_94(bound=int(1e+9)):
    '''
    It is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the almost equilateral triangle 5-5-6 has an area of 12 square units.
    We shall define an almost equilateral triangle to be a triangle for which two sides are equal and the third differs by no more than one unit.
    Find the sum of the perimeters of all almost equilateral triangles with integral side lengths and area and whose perimeters do not exceed one billion (1,000,000,000).
    '''
    # idea: split the almost-equilateral into two right triangles.
    # sides (a, b, c) in each right triangle where c is the hypotenuse and b is half a side of the almost-equilateral. 
    # sides (c, c, 2b) in the almost-equilateral
    # -> note that abs(c - 2b) = 1
    # -> this also implies that c and b are coprime, because if there weren't, then abs(c - 2b) would be divisible by their common factor
    # Hence we get two strong conditions:
    # -> abs(c - 2b) = 1
    # -> a, b, c must be coprime
    
    from subroutines import pythagorean_triplets
    from math import sqrt
    bound_for_c = (bound + 1) // 3
    
    # find all the triplets with specific ratio bounds
    # although we know that the triplets are coprime, it is way faster to check abs(c - 2b) = 1 than co-primeness, so loosening that constraint saves time computing triplets 
    triplets = pythagorean_triplets(bound_for_c + 1, 2-sqrt(3), 1/sqrt(3), coprime=False)
   
    total = 0
    triangles = []
    # b < a < c
    for _b, _a, _c in triplets:
        if abs(_c - 2 * _b) == 1:
            perimeter = 2 * _c + 2 * _b
            total += perimeter
            triangles.append((_c, _c, 2 * _b))
    return triangles, total

@wrappy.probe()
def euler_problem_95(bound=round(1e+6)):
    '''
    The proper divisors of a number are all the divisors excluding the number itself. For example, the proper divisors of 28 are 1, 2, 4, 7, and 14. As the sum of these divisors is equal to 28, we call it a perfect number.
    Interestingly the sum of the proper divisors of 220 is 284 and the sum of the proper divisors of 284 is 220, forming a chain of two numbers. For this reason, 220 and 284 are called an amicable pair.
    Perhaps less well known are longer chains. For example, starting with 12496, we form a chain of five numbers:
    12496 → 14288 → 15472 → 14536 → 14264 (→ 12496 → ...)
    Since this chain returns to its starting point, it is called an amicable chain.
    Find the smallest member of the longest amicable chain with no element exceeding one million.
    '''
    # idea: the sum of all divisors is easy to compute given a factorization.
    from subroutines import Factorizer, get_sum_proper_divisors, DFS_SCC

    # compute the divisor sums
    fac = Factorizer(bound)
    lookup = dict()
    for num in tqdm(range(1, bound)):
        _factors = fac.factorize(num)
        lookup[num] = get_sum_proper_divisors(_factors)

    # build a graph
    adjacency_list = [[]] + [None] * (bound - 1)
    for _key, _value in tqdm(lookup.items()):
        if _value < bound:
            adjacency_list[_key] = [_value]
        else:
            adjacency_list[_key] = []

    # run strongly-connected components
    components = DFS_SCC(adjacency_list)
    longest_chain = max(components, key=lambda x: len(x))
    return longest_chain, min(longest_chain)
            

if __name__ == "__main__":
    print(euler_problem_95())
